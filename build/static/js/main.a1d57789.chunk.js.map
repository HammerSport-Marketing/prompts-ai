{"version":3,"sources":["slices/editorSlice.ts","services/GptAPI.ts","components/examples/Example.tsx","components/examples/ExampleCollection.tsx","components/examples/RunExamplesButton.tsx","components/examples/ExamplesTab.tsx","components/variations/FetchVariationsButton.tsx","components/variations/Variation.tsx","components/variations/VariationsCollection.tsx","components/variations/VariationsTab.tsx","libs/codeGenerator.ts","components/CodeGeneratorButton.tsx","components/conversations/CompletionParameters.tsx","components/conversations/Input.tsx","components/conversations/Conversation.tsx","components/conversations/ConversationsTab.tsx","components/basic/BasicTab.tsx","components/ModeTabs.tsx","components/workspaceSelector/CreateButton.tsx","components/workspaceSelector/EditPopup.tsx","components/workspaceSelector/EditButton.tsx","components/workspaceSelector/DeletePopup.tsx","components/workspaceSelector/DeleteButton.tsx","components/workspaceSelector/WorkspaceSelector.tsx","components/fileExport/DownloadButton.tsx","components/fileExport/UploadButton.tsx","components/WorkspaceForm.tsx","components/PromptEditor.tsx","components/Header.tsx","libs/templatesLibrary.ts","components/dialogs/TemplateDialog.tsx","components/dialogs/ApiKeyDialog.tsx","App.tsx","migrations.ts","store.ts","index.tsx"],"names":["TabIndex","ConversationPartSource","GptAPI","prompt","completionParams","n","axios","method","url","engine","headers","apiKey","data","maxTokens","temperature","stop","topP","presencePenalty","frequencyPenalty","initialState","undefined","currentWorkspaceId","editableWorkspaceName","workspaces","id","name","modelName","stopSymbols","tabIndex","showExamplePreviousOutputs","examples","uniqid","text","output","isLoading","loadingVariations","variations","maxVariations","showPromptForVariations","conversations","basic","loading","showApiKeyDialog","showTemplateDialog","editorSlice","createSlice","reducers","editExample","state","action","workspace","find","w","map","value","payload","cleanExampleList","length","push","filter","index","markExampleAsLoading","markAllExamplesAsNotLoading","loadOutputForExample","previousOutput","deleteExample","example","updateExamplePreviousOutputsStatus","loadBasicOutput","setBasicLoading","updateVariationsLoadingStatus","addVariation","editMaxVariations","cleanVariations","updateShowPromptForVariations","normalizeConversations","parts","startSequence","restartSequence","unshift","convertConversationPartToText","user","source","submitted","inputValue","initialPrompt","setConversationCompletionParams","conversation","conversationId","parameters","setConversationInitialPrompt","updateConversationLoadingStatus","status","updateConversationInputValue","updateConversationStartSequence","updateConversationRestartSequence","addMessageInConversation","inputText","lastPartInd","lastPart","console","log","nextSource","gpt","deleteConversation","c","loadTemplate","loadTemplateFromFileData","editPrompt","editApiKey","editModelName","editTemperature","editTopP","editFrequencyPenalty","editPresencePenalty","addStopSymbol","deleteStopSymbol","symbol","editMaxTokens","updateTabIndex","updateWorkspaceId","newWorkspace","createWorkspace","currentWorkspace","updateCurrentWorkspaceName","updateEditableWorkspaceName","deleteCurrentWorkspace","toggleApiKeyDialog","toggleTemplateDialog","fetchBasicOutputAsync","dispatch","getState","editor","present","selectCompletionParameters","generateCompletions","then","response","choiceResult","choices","catch","error","alert","finally","fetchExamplesOutputsAsync","indexOf","examplePrompts","replace","exampleIds","exampleId","exampleResult","ind","fetchVariationsAsync","variationResult","selectApiKey","selectApiKeyDialogVisible","selectTemplateDialogVisible","selectCurrentWorkspaceId","selectEditableWorkspaceName","selectWorkspacesList","selectTabIndex","selectPrompt","selectStopSymbols","selectModelName","selectTemperature","selectTopP","selectFrequencyPenalty","selectPresencePenalty","selectMaxTokens","split","join","selectExamples","selectExamplePreviousOutputsStatus","selectBasicOutput","selectBasicLoading","selectVariationsLoadingStatus","selectVariations","selectMaxVariations","selectShowPromptForVariations","actions","useStyles","makeStyles","theme","card","backgroundColor","palette","background","default","Example","props","useDispatch","styles","showPreviousOutput","useSelector","Card","className","CardContent","Grid","container","direction","justify","alignItems","spacing","item","xs","md","Box","mb","TextField","multiline","type","onChange","event","currentTarget","fullWidth","label","variant","InputLabelProps","shrink","disabled","mt","CircularProgress","isLast","IconButton","onClick","Delete","gridCard","width","ExampleCollection","key","RunExamplesButton","Button","size","color","ExamplesTab","showPreviousOutputs","useEffect","instructionCard","Typography","FormControlLabel","control","Switch","createStyles","buttonProgress","green","position","top","left","marginTop","marginLeft","FetchVariationsButton","whiteSpace","Variation","role","aria-label","component","CardActions","VariationsCollection","completions","slice","reverse","completion","VariationsTab","maxCompletions","showPrompt","gutterBottom","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","checked","PythonOutputType","generateCodeExamples","completionParameters","exampleText","getFirstExampleOrPlaceholder","language","generatePythonExample","plain","stream","generateNodeJsExample","generateTypescriptExample","generateShellExample","multipleExamples","formatJavascriptString","formatStopSymbolsJavascriptStringOrStringList","replaceAllOccurrences","JSON","stringify","formatStopSymbolsForShell","outputType","completionVariableName","additionalArguments","outputCode","toxicity","formatPythonString","formatStopSymbolsPythonStringOrStringList","Array","formatStopSymbolStringForCode","includes","formattedString","formatJavascriptStringList","formatPythonStringList","replace_from","replace_to","closeButton","right","grey","CodeGeneratorButton","defaultExampleId","classes","React","useState","open","setOpen","scroll","setScroll","codeExamples","scrollType","selectedExample","setExample","handleClose","descriptionElementRef","useRef","descriptionElement","current","focus","Dialog","onClose","maxWidth","DialogTitle","DialogContent","dividers","DialogContentText","ref","FormControl","Select","native","target","codeExample","CompletionParameters","Input","hasStarted","some","onSend","updatedConversation","p","afterSend","placeholder","onKeyDown","metaKey","onKeyUp","ctrlKey","InputProps","endAdornment","InputAdornment","edge","settingField","minWidth","generatedText","display","fontWeight","promptedText","conversationBox","minHeight","maxHeight","overflowY","responseInput","Conversation","globalCompletionParameters","conversationBottom","scrollTop","scrollHeight","createRef","Paper","ml","part","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","gridItem","ConversationsTab","conversationIds","BasicTab","basicOutput","basicLoading","aria-readonly","rows","rowsMax","readOnly","TabPanel","children","other","hidden","a11yProps","root","flexGrow","paper","additionalItemsGridItem","marginRight","ModeTabs","AppBar","Tabs","newValue","Tab","Hidden","smDown","CreateButton","ActionCreators","clearHistory","EditPopup","editableName","autoFocus","margin","DialogActions","EditButton","isPopupOpen","setPopupOpen","DeletePopup","DeleteButton","selectGridItem","WorkspaceSelector","workspaceId","DownloadButton","useHotkeys","preventDefault","handleSaveAndDownload","element","document","createElement","savedStopSymbols","file","Blob","href","URL","createObjectURL","download","Math","trunc","Date","now","body","appendChild","click","startIcon","UploadButton","fileReader","FileReader","onload","result","template","parse","readAsText","onError","err","accepts","maxFileSize","minFileSize","clickable","fileExportButton","templateButton","WorkspaceForm","PromptEditor","sm","Tooltip","title","placement","onAdd","chip","onDelete","deletedChip","onBeforeAdd","newChipKeys","buttonGroup","apiKeyInput","Header","apiKeyPresent","Container","Toolbar","disableGutters","undo","redo","window","fontSize","templateGroups","templates","uniqueId","actionPayload","getTemplateGroups","templateDialog","templateGroupHeader","TemplateDialog","templateDialogOpen","handleTemplateDialogClose","handleLoadTemplate","templateGroup","List","subheader","ListSubheader","ListItem","button","ListItemText","ApiKeyDialog","apiKeyDialogOpen","handleApiKeyDialogClose","App","createMuiTheme","ThemeProvider","CssBaseline","migrations","0","maxCreativeCompletions","creativeCompletions","1","showPromptForCreativeCompletions","2","3","4","5","6","7","past","future","8","9","10","loadingCreativeCompletions","12","13","14","15","filteredActions","combineReducers","undoable","editorReducer","limit","groupBy","floor","persistConfig","version","migrate","createMigrate","storage","persistedReducer","persistReducer","middlewares","getDefaultMiddleware","serializableCheck","immutableCheck","createStateSyncMiddleware","blacklist","PERSIST","PURGE","REHYDRATE","store","configureStore","reducer","middleware","persistor","persistStore","initMessageListener","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a1d57789.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport uniqid from \"uniqid\";\nimport {AppThunk, RootState} from \"../store\";\nimport GptAPI, {ChoiceResult} from \"../services/GptAPI\";\n\n// TODO: This file grew too fast. It needs to be split into separate slices for different modes.\n\n// State\n\ninterface Example {\n    id: string;\n    text: string;\n    isLoading: boolean;\n    output?: string;\n    previousOutput?: string;\n}\n\ninterface CompletionParameters {\n    apiKey: string;\n    engine: string;\n    maxTokens: number;\n    stop: string | Array<string>;\n    prompt: string;\n    temperature: number;\n    topP: number;\n    presencePenalty: number;\n    frequencyPenalty: number;\n}\n\nenum TabIndex {\n    basic = 0,\n    multipleExamples,\n    variations,\n    conversations\n}\n\ninterface Variation {\n    id: string;\n    prompt: string;\n    output: string;\n    temperature: number;\n    maxTokens: number;\n    topP: number;\n    frequencyPenalty: number;\n    presencePenalty: number;\n    modelName: string;\n}\n\ninterface Basic {\n    output: string;\n    loading: boolean;\n}\n\nenum ConversationPartSource {\n    user = 'user',\n    gpt = 'gpt'\n}\n\ninterface ConversationPart {\n    source: ConversationPartSource;\n    text: string;\n    submitted: boolean;\n}\n\ninterface ConversationCompletionParameters {\n    engine: string;\n    maxTokens: number;\n    stop: string | Array<string>;\n    prompt: string;\n    temperature: number;\n    topP: number;\n    presencePenalty: number;\n    frequencyPenalty: number;\n}\n\ninterface Conversation {\n    id: string;\n    initialPrompt?: string;\n    inputValue: string;\n    isLoading: boolean;\n    startSequence: string;\n    restartSequence: string;\n    parts: Array<ConversationPart>;\n    completionParams?: ConversationCompletionParameters;\n}\n\ninterface Workspace {\n    id: string;\n    name: string;\n\n    prompt: string;\n    modelName: string;\n    temperature: number;\n    topP: number;\n    frequencyPenalty: number;\n    presencePenalty: number;\n    stopSymbols: Array<string>;\n    maxTokens: number;\n    tabIndex: TabIndex;\n\n    showExamplePreviousOutputs: boolean;\n    examples: Array<Example>;\n\n    loadingVariations: boolean;\n    variations: Array<Variation>;\n    maxVariations: number;\n    showPromptForVariations: boolean;\n\n    basic: Basic;\n\n    conversations: Array<Conversation>;\n}\n\ninterface EditorState {\n    apiKey?: string;\n    currentWorkspaceId: string;\n    editableWorkspaceName: string;\n    workspaces: Array<Workspace>;\n\n    showApiKeyDialog: boolean;\n    showTemplateDialog: boolean;\n}\n\nconst initialState: EditorState = {\n    apiKey: undefined,\n    currentWorkspaceId: 'first_workspace',\n    editableWorkspaceName: 'Draft #1',\n    workspaces: [{\n        id: 'first_workspace',\n        name: 'Draft #1',\n        prompt: \"Input: Anna and Mike is going skiing.\\n\" +\n            \"Output: Anna and Mike are going skiing.\\n\" +\n            \"Input: Anna and Pat are married; he has been together for 20 years.\\n\" +\n            \"Output: Anna and Pat are married; they have been together for 20 years.\\n\" +\n            \"Input: I walk to the store and I bought milk.\\n\" +\n            \"Output: I walked to the store and I bought milk.\\n\" +\n            \"Input: {example}\\n\" +\n            \"Output:\",\n        modelName: 'davinci',\n        temperature: 0.5,\n        topP: 1,\n        frequencyPenalty: 0,\n        presencePenalty: 0,\n        stopSymbols: [\"\\\\n\"],\n        maxTokens: 30,\n        tabIndex: 0,\n\n        showExamplePreviousOutputs: false,\n        examples: [\n            {id: uniqid(\"input_\"), text: \"We all eat the fish and then made dessert.\", output: \"We all ate the fish and then made dessert.\", isLoading: false},\n            {id: uniqid(\"input_\"), text: \"I like ski every day.\", output: \"I like skiing every day.\", isLoading: false},\n        ],\n\n        loadingVariations: false,\n        variations: [],\n        maxVariations: 10,\n        showPromptForVariations: true,\n\n        conversations: [],\n\n        basic: {\n            output: '',\n            loading: false,\n        },\n    }],\n    showApiKeyDialog: false,\n    showTemplateDialog: false,\n};\n\n// Action Payloads: Examples\n\ninterface EditExampleActionPayload {\n    id: string;\n    text: string;\n}\n\ninterface LoadExampleOutputActionPayload {\n    id: string;\n    output: string;\n}\n\n// Action Payloads: Variations\n\ninterface AddVariationActionPayload {\n    output: string;\n    prompt: string;\n    temperature: number;\n    maxTokens: number;\n    topP: number;\n    frequencyPenalty: number;\n    presencePenalty: number;\n    modelName: string;\n}\n\n// Action Payloads: Conversations\n\ninterface SetConversationCompletionParametersActionPayload {\n    conversationId: string;\n    parameters: ConversationCompletionParameters;\n}\n\ninterface SetConversationInitialPromptActionPayload {\n    conversationId: string;\n    initialPrompt: string;\n}\n\ninterface UpdateConversationLoadingStatusActionPayload {\n    conversationId: string;\n    status: boolean;\n}\n\ninterface UpdateConversationInputValueActionPayload {\n    conversationId: string;\n    inputValue: string;\n}\n\ninterface UpdateConversationStartSequenceActionPayload {\n    conversationId: string;\n    startSequence: string;\n}\n\ninterface UpdateConversationRestartSequenceActionPayload {\n    conversationId: string;\n    restartSequence: string;\n}\n\n\ninterface AddMessageToConversationFromUserActionPayload {\n    conversationId: string;\n    source: ConversationPartSource.user;\n}\n\ninterface AddMessageToConversationFromGptActionPayload {\n    conversationId: string;\n    text: string;\n    source: ConversationPartSource.gpt;\n}\n\n// Action Payloads: Templates\n\ninterface LoadTemplateFromFileDataActionPayload {\n    prompt: string;\n    temperature: number;\n    topP: number;\n    frequencyPenalty: number;\n    presencePenalty: number;\n    maxTokens: number;\n    stopSymbols: Array<string>;\n    modelName: string;\n}\n\ninterface LoadTemplateActionExample {\n    text: string;\n    output: string;\n}\n\ninterface LoadTemplateActionPayload {\n    prompt: string;\n    examples: Array<LoadTemplateActionExample>;\n    stopSymbols?: Array<string>;\n    tabIndex: number;\n    startSequence?: string;\n    restartSequence?: string;\n}\n\nconst editorSlice = createSlice({\n    name: 'editor',\n    initialState,\n    reducers: {\n        editExample: (state, action: PayloadAction<EditExampleActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.examples = workspace.examples.map(value => {\n                if (value.id === action.payload.id) {\n                    value.text = action.payload.text;\n                }\n                return value;\n            });\n        },\n        cleanExampleList: (state) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            // Always add an empty example for user to fill out\n            if (workspace.examples.length < 1 || workspace.examples[workspace.examples.length - 1].text.length) {\n                workspace.examples.push({id: uniqid(\"input_\"), text: \"\", output: undefined, isLoading: false});\n            }\n            // Delete all empty inputs except for the last one\n            workspace.examples = workspace.examples.filter((value, index) => {\n                if (index === workspace.examples.length - 1) {\n                    return true;\n                }\n                return value.text.length > 0;\n            })\n        },\n        markExampleAsLoading: (state, action: PayloadAction<string>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.examples = workspace.examples.map(value => {\n                if (value.id === action.payload) {\n                    value.isLoading = true;\n                }\n                return value;\n            });\n        },\n        markAllExamplesAsNotLoading: (state) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.examples = workspace.examples.map(value => {\n                value.isLoading = false;\n                return value;\n            });\n        },\n        loadOutputForExample: (state, action: PayloadAction<LoadExampleOutputActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.examples = workspace.examples.map(value => {\n                if (value.id === action.payload.id) {\n                    value.previousOutput = value.output;\n                    value.output = action.payload.output;\n                    value.isLoading = false;\n                }\n                return value;\n            });\n        },\n        deleteExample: (state, action: PayloadAction<string>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.examples = workspace.examples.filter(example => example.id !== action.payload);\n        },\n        updateExamplePreviousOutputsStatus: (state, action: PayloadAction<boolean>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.showExamplePreviousOutputs = action.payload;\n        },\n        loadBasicOutput: (state, action: PayloadAction<string>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.basic.output = action.payload;\n        },\n        setBasicLoading: (state, action: PayloadAction<boolean>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.basic.loading = action.payload;\n        },\n\n        updateVariationsLoadingStatus: (state, action: PayloadAction<boolean>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.loadingVariations = action.payload;\n        },\n        addVariation: (state, action: PayloadAction<AddVariationActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.variations.push({\n                id: uniqid('variation_'),\n                output: action.payload.output,\n                prompt: action.payload.prompt,\n                temperature: action.payload.temperature,\n                maxTokens: action.payload.maxTokens,\n                topP: action.payload.topP,\n                frequencyPenalty: action.payload.frequencyPenalty,\n                presencePenalty: action.payload.presencePenalty,\n                modelName: action.payload.modelName,\n            });\n        },\n        editMaxVariations: (state, action: PayloadAction<number>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.maxVariations = action.payload;\n        },\n        cleanVariations: (state) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.variations = [];\n        },\n        updateShowPromptForVariations: (state, action: PayloadAction<boolean>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.showPromptForVariations = action.payload;\n        },\n\n        normalizeConversations: (state) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            // Always add an empty conversation for user to start\n            if (workspace.conversations.length < 1 || workspace.conversations[0].parts.length > 1) {\n                let startSequence = \"\\nAI:\";\n                let restartSequence = \"\\nUser: \";\n                if (workspace.conversations.length >= 1) {\n                    startSequence = workspace.conversations[0].startSequence;\n                    restartSequence = workspace.conversations[0].restartSequence;\n                }\n                workspace.conversations.unshift({\n                    id: uniqid(\"conversation_\"), parts: [\n                        {text: convertConversationPartToText(\n                            '', ConversationPartSource.user,\n                                startSequence, restartSequence),\n                            source: ConversationPartSource.user,\n                            submitted: false}\n                    ], completionParams: undefined, inputValue: '',\n                    isLoading: false, initialPrompt: undefined, startSequence: startSequence, restartSequence: restartSequence\n                });\n            }\n        },\n        setConversationCompletionParams: (state,\n                                          action: PayloadAction<SetConversationCompletionParametersActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.conversations = workspace.conversations.map(conversation => {\n                if (conversation.id === action.payload.conversationId) {\n                    conversation.completionParams = action.payload.parameters;\n                }\n                return conversation;\n            });\n        },\n        setConversationInitialPrompt: (state, action: PayloadAction<SetConversationInitialPromptActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.conversations = workspace.conversations.map(conversation => {\n                if (conversation.id === action.payload.conversationId) {\n                    conversation.initialPrompt = action.payload.initialPrompt;\n                }\n                return conversation;\n            });\n        },\n        updateConversationLoadingStatus: (state, action: PayloadAction<UpdateConversationLoadingStatusActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.conversations = workspace.conversations.map(conversation => {\n                if (conversation.id === action.payload.conversationId) {\n                    conversation.isLoading = action.payload.status;\n                }\n                return conversation;\n            });\n        },\n        updateConversationInputValue: (state, action: PayloadAction<UpdateConversationInputValueActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.conversations = workspace.conversations.map(conversation => {\n                if (conversation.id === action.payload.conversationId) {\n                    conversation.inputValue = action.payload.inputValue;\n                }\n                return conversation;\n            });\n        },\n        updateConversationStartSequence: (state, action: PayloadAction<UpdateConversationStartSequenceActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.conversations = workspace.conversations.map(conversation => {\n                if (conversation.id === action.payload.conversationId) {\n                    conversation.startSequence = action.payload.startSequence;\n                }\n                return conversation;\n            });\n        },\n        updateConversationRestartSequence: (state, action: PayloadAction<UpdateConversationRestartSequenceActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.conversations = workspace.conversations.map(conversation => {\n                if (conversation.id === action.payload.conversationId) {\n                    conversation.restartSequence = action.payload.restartSequence;\n                }\n                return conversation;\n            });\n        },\n        addMessageInConversation: (state, action: PayloadAction<AddMessageToConversationFromUserActionPayload | AddMessageToConversationFromGptActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.conversations = workspace.conversations.map(conversation => {\n                if (conversation.id !== action.payload.conversationId) {\n                    return conversation;\n                }\n\n                let inputText: string;\n                if (action.payload.source === ConversationPartSource.user) {\n                    inputText = conversation.inputValue;\n                    conversation.inputValue = '';\n                } else {\n                    inputText = action.payload.text;\n                }\n\n                const lastPartInd = conversation.parts.length - 1;\n                const lastPart = conversation.parts[lastPartInd];\n\n                // It shouldn't happen.\n                if (lastPart.source !== action.payload.source) {\n                    console.log('[lastPart.source !== action.payload.source]');\n                    return conversation;\n                }\n\n                lastPart.text = convertConversationPartToText(\n                    inputText, lastPart.source,\n                    conversation.startSequence, conversation.restartSequence)\n                lastPart.submitted = true;\n                conversation.parts[lastPartInd] = lastPart;\n\n                const nextSource = (\n                    lastPart.source === ConversationPartSource.gpt\n                        ? ConversationPartSource.user\n                        : ConversationPartSource.gpt\n                );\n                conversation.parts.push({\n                    source: nextSource,\n                    text: convertConversationPartToText(\n                        '', nextSource,\n                        conversation.startSequence, conversation.restartSequence),\n                    submitted: false\n                });\n\n                return conversation;\n            });\n        },\n        deleteConversation: (state, action: PayloadAction<string>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.conversations = workspace.conversations.filter(c => c.id !== action.payload);\n        },\n\n        loadTemplate: (state, action: PayloadAction<LoadTemplateActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.prompt = action.payload.prompt;\n            workspace.examples = action.payload.examples.map((example) => {\n                return {id: uniqid('example_'), text: example.text, output: example.output, isLoading: false}\n            });\n\n            if (action.payload.stopSymbols !== undefined) {\n                workspace.stopSymbols = action.payload.stopSymbols;\n            }\n            if (action.payload.startSequence !== undefined) {\n                workspace.conversations[0]!.startSequence = action.payload.startSequence;\n            }\n            if (action.payload.restartSequence !== undefined) {\n                workspace.conversations[0]!.restartSequence = action.payload.restartSequence;\n            }\n            workspace.tabIndex = action.payload.tabIndex;\n        },\n        loadTemplateFromFileData: (state, action: PayloadAction<LoadTemplateFromFileDataActionPayload>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.prompt = action.payload.prompt;\n            workspace.temperature = action.payload.temperature;\n            workspace.topP = action.payload.topP;\n            workspace.frequencyPenalty = action.payload.frequencyPenalty;\n            workspace.presencePenalty = action.payload.presencePenalty;\n            workspace.maxTokens = action.payload.maxTokens;\n            workspace.stopSymbols = action.payload.stopSymbols;\n            workspace.modelName = action.payload.modelName;\n        },\n        editPrompt: (state, action: PayloadAction<string>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.prompt = action.payload;\n        },\n        editApiKey: (state, action: PayloadAction<string>) => {\n            state.apiKey = action.payload;\n        },\n        editModelName: (state, action: PayloadAction<string>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.modelName = action.payload;\n        },\n        editTemperature: (state, action: PayloadAction<number>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.temperature = action.payload;\n        },\n        editTopP: (state, action: PayloadAction<number>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.topP = action.payload;\n        },\n        editFrequencyPenalty: (state, action: PayloadAction<number>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.frequencyPenalty = action.payload;\n        },\n        editPresencePenalty: (state, action: PayloadAction<number>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.presencePenalty = action.payload;\n        },\n        addStopSymbol: (state, action: PayloadAction<string>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.stopSymbols.push(action.payload);\n        },\n        deleteStopSymbol: (state, action: PayloadAction<string>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.stopSymbols = workspace.stopSymbols.filter((symbol) => symbol !== action.payload);\n        },\n        editMaxTokens: (state, action: PayloadAction<number>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.maxTokens = action.payload;\n        },\n        updateTabIndex: (state, action: PayloadAction<number>) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.tabIndex = action.payload;\n        },\n\n        updateWorkspaceId: (state, action: PayloadAction<string>) => {\n            const newWorkspace = state.workspaces.find(w => w.id === action.payload);\n            if (newWorkspace === undefined) {\n                return;\n            }\n            state.currentWorkspaceId = action.payload;\n            state.editableWorkspaceName = newWorkspace.name;\n        },\n        createWorkspace: (state) => {\n            let currentWorkspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            const newWorkspace = {\n                ...currentWorkspace,\n                id: uniqid('workspace_'),\n                name: `Draft #${state.workspaces.length + 1}`\n            };\n            state.workspaces.push(newWorkspace);\n            state.currentWorkspaceId = newWorkspace.id;\n            state.editableWorkspaceName = newWorkspace.name;\n        },\n        updateCurrentWorkspaceName: (state) => {\n            let workspace = state.workspaces.find(w => w.id === state.currentWorkspaceId)!\n            workspace.name = state.editableWorkspaceName;\n        },\n        updateEditableWorkspaceName: (state, action: PayloadAction<string>) => {\n            state.editableWorkspaceName = action.payload;\n        },\n        deleteCurrentWorkspace: (state) => {\n            if (state.workspaces.length < 2) {\n                return;\n            }\n            state.workspaces = state.workspaces.filter(w => w.id !== state.currentWorkspaceId);\n            const newWorkspace = state.workspaces[state.workspaces.length - 1];\n            state.currentWorkspaceId = newWorkspace.id;\n            state.editableWorkspaceName = newWorkspace.name;\n        },\n\n        toggleApiKeyDialog: (state, action: PayloadAction<boolean>) => {\n            state.showApiKeyDialog = action.payload;\n        },\n        toggleTemplateDialog: (state, action: PayloadAction<boolean>) => {\n            state.showTemplateDialog = action.payload;\n        },\n    },\n});\n\nconst fetchForCurrentTab = (): AppThunk => (dispatch, getState) => {\n    const state = getState();\n    let workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!\n    switch (workspace.tabIndex) {\n        case TabIndex.basic: {\n            dispatch(fetchBasicOutputAsync());\n            break;\n        }\n        case TabIndex.multipleExamples: {\n            dispatch(fetchExamplesOutputsAsync());\n            break;\n        }\n        case TabIndex.variations: {\n            dispatch(fetchVariationsAsync());\n            break;\n        }\n    }\n}\n\nconst fetchBasicOutputAsync = (): AppThunk => (dispatch, getState) => {\n    const state = getState();\n    let workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!\n    if (state.editor.present.apiKey === undefined) {\n        alert('Enter an API key before running requests.');\n        return;\n    }\n    if (workspace.prompt.length === 0) {\n        alert(\"The prompt can't be empty\");\n        return;\n    }\n\n    const completionParams = selectCompletionParameters(state);\n    dispatch(setBasicLoading(true));\n    GptAPI.generateCompletions(completionParams.prompt, completionParams).then(response => {\n        console.log(response.data);\n        return { ...response.data };\n    }).then(response => {\n        const choiceResult = response.choices[0] as ChoiceResult;\n        dispatch(loadBasicOutput(choiceResult.text));\n    }).catch(error => {\n        alert('API returned an error. Refer to the console to inspect it.')\n        console.log(error.response);\n        dispatch(markAllExamplesAsNotLoading());\n    }).finally(() => {\n        dispatch(setBasicLoading(false));\n    });\n};\n\nconst fetchExamplesOutputsAsync = (): AppThunk => (dispatch, getState) => {\n    const state = getState();\n    let workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!\n    if (state.editor.present.apiKey === undefined) {\n        alert('Enter an API key before running requests.');\n        return;\n    }\n    if (workspace.prompt.length === 0) {\n        alert(\"The prompt can't be empty\");\n        return;\n    }\n    if (workspace.prompt.indexOf('{example}') === -1) {\n        alert('Use \"{example}\" in your prompt to use the Multiple Examples mode');\n        return;\n    }\n\n    const examples = workspace.examples.filter(example => example.text.length > 0);\n    if (examples.length === 0) {\n        alert('Enter at least one example');\n        return;\n    }\n\n    const completionParams = selectCompletionParameters(state);\n    const examplePrompts = examples.map(example => completionParams.prompt.replace('{example}', example.text));\n    const exampleIds = examples.map(example => example.id);\n    exampleIds.map((exampleId) => dispatch(markExampleAsLoading(exampleId)));\n\n    GptAPI.generateCompletions(examplePrompts, completionParams).then(response => {\n        console.log(response.data);\n        return { ...response.data };\n    }).then(response => {\n        response.choices.map((exampleResult: ChoiceResult, ind: number) => {\n             const exampleId = exampleIds[ind];\n             dispatch(loadOutputForExample({id: exampleId, output: exampleResult.text}));\n             return undefined;\n        });\n    }).catch(error => {\n        alert('API returned an error. Refer to the console to inspect it.')\n        console.log(error.response);\n        dispatch(markAllExamplesAsNotLoading());\n    });\n};\n\nconst fetchVariationsAsync = (): AppThunk => (dispatch, getState) => {\n    const state = getState();\n    let workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!;\n    if (state.editor.present.apiKey === undefined) {\n        alert('Enter an API key before running requests.');\n        return;\n    }\n    if (workspace.prompt.length === 0) {\n        alert(\"The prompt can't be empty\");\n        return;\n    }\n\n    dispatch(updateVariationsLoadingStatus(true));\n\n    const completionParams = selectCompletionParameters(state);\n\n    GptAPI.generateCompletions(completionParams.prompt, completionParams, workspace.maxVariations).then(response => {\n        console.log(response.data);\n        return { ...response.data };\n    }).then(response => {\n        dispatch(updateVariationsLoadingStatus(false));\n        response.choices.map((variationResult: ChoiceResult) => (\n            dispatch(addVariation({\n                output: variationResult.text,\n                prompt: completionParams.prompt,\n                temperature: completionParams.temperature,\n                maxTokens: completionParams.maxTokens,\n                topP: completionParams.topP,\n                presencePenalty: completionParams.presencePenalty,\n                frequencyPenalty: completionParams.frequencyPenalty,\n                modelName: completionParams.engine\n            }))\n        ));\n    }).catch(error => {\n        alert('API returned an error. Refer to the console to inspect it.')\n        console.log(error.response);\n        dispatch(updateVariationsLoadingStatus(false));\n    });\n}\n\nconst sendMessageInConversationAsync = (conversationId: string): AppThunk => (dispatch, getState) => {\n    const state = getState();\n    let workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!;\n    if (state.editor.present.apiKey === undefined) {\n        alert('Enter an API key before running requests.');\n        return;\n    }\n    const conversation = workspace.conversations.find(conversation => conversation.id === conversationId);\n    if (conversation === undefined) {\n        return;\n    }\n\n    // If it is a first message in the conversation, lock current completion parameters and prompt for whole conversation\n    if (conversation.parts.length === 1) {\n        dispatch(setConversationInitialPrompt({\n            conversationId: conversationId, initialPrompt: selectPrompt(state)\n        }));\n        dispatch(setConversationCompletionParams({\n            conversationId: conversationId, parameters: selectCompletionParameters(state)\n        }));\n    }\n\n    dispatch(addMessageInConversation({conversationId: conversationId, source: ConversationPartSource.user}))\n    dispatch(updateConversationLoadingStatus({conversationId: conversationId, status: true}));\n\n    const updatedState = getState();\n    let updatedWorkspace = updatedState.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!;\n    const updatedConversation = updatedWorkspace.conversations.find(conversation => conversation.id === conversationId);\n    if (updatedConversation === undefined) {\n        return;\n    }\n    const completionParams = {apiKey: state.editor.present.apiKey, ...updatedConversation.completionParams!};\n    const prompt = updatedConversation.initialPrompt + updatedConversation.parts.map(p => p.text).join('');\n    GptAPI.generateCompletions(prompt, completionParams).then(response => {\n        console.log(response.data);\n        return { ...response.data };\n    }).then(response => {\n        dispatch(updateConversationLoadingStatus({conversationId: conversationId, status: false}));\n        dispatch(addMessageInConversation({conversationId: conversationId, source: ConversationPartSource.gpt,\n            text: response['choices'][0]['text']}))\n    });\n\n}\n\nconst selectApiKey = (state: RootState) => state.editor.present.apiKey;\nconst selectApiKeyDialogVisible = (state: RootState) => state.editor.present.showApiKeyDialog;\nconst selectTemplateDialogVisible = (state: RootState) => state.editor.present.showTemplateDialog;\nconst selectCurrentWorkspaceId = (state: RootState) => state.editor.present.currentWorkspaceId;\nconst selectEditableWorkspaceName = (state: RootState) => state.editor.present.editableWorkspaceName;\nconst selectCurrentWorkspaceName = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.name;\nconst selectWorkspacesList = (state: RootState) => state.editor.present.workspaces.map(w => ({id: w.id, name: w.name}));\n\nconst selectTabIndex = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.tabIndex;\nconst selectPrompt = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.prompt;\nconst selectStopSymbols = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.stopSymbols;\n\nconst selectModelName = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.modelName;\nconst selectTemperature = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.temperature;\nconst selectTopP = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.topP;\nconst selectFrequencyPenalty = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.frequencyPenalty;\nconst selectPresencePenalty = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.presencePenalty;\nconst selectMaxTokens = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.maxTokens;\nconst selectCompletionParameters = (state: RootState) => {\n    const workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!;\n    return {\n        apiKey: state.editor.present.apiKey === undefined ? '' : state.editor.present.apiKey,\n        engine: workspace.modelName,\n        maxTokens: workspace.maxTokens,\n        stop: (() => {\n            if (workspace.stopSymbols.length > 0) {\n                return workspace.stopSymbols.map(symbol => {\n                    return symbol.split('\\\\n').join('\\n');\n                });\n            } else {\n                return '';\n            }\n        })(),\n        prompt: workspace.prompt,\n        temperature: workspace.temperature,\n        topP: workspace.topP,\n        presencePenalty: workspace.presencePenalty,\n        frequencyPenalty: workspace.frequencyPenalty,\n    };\n};\n\nconst selectExamples = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.examples;\nconst selectExamplePreviousOutputsStatus = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.showExamplePreviousOutputs;\n\nconst selectBasicOutput = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.basic.output;\nconst selectBasicLoading = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.basic.loading;\n\nconst selectVariationsLoadingStatus = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.loadingVariations;\nconst selectVariations = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.variations;\nconst selectMaxVariations = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.maxVariations;\nconst selectShowPromptForVariations = (state: RootState) => state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!.showPromptForVariations;\n\n// Helpers\n\nfunction convertConversationPartToText(text: string, source: ConversationPartSource,\n                                       startSequence: string, restartSequence: string): string {\n    if (source === ConversationPartSource.user) {\n        return restartSequence + text;\n    } else { // source === ConversationPartSource.gpt\n        return startSequence + text;\n    }\n}\n\n// Exports\n\nexport default editorSlice.reducer;\nexport {editorSlice};\n\n// State Enums\n\nexport {TabIndex, ConversationPartSource};\n\n// State Parts\n\nexport type {\n    CompletionParameters, Example, // for code generator\n    ConversationCompletionParameters, // for conversation's completion parameters props\n};\n\n// Action payloads\n\nexport type {\n    LoadTemplateFromFileDataActionPayload, LoadTemplateActionPayload, // for templates library\n};\n\n// Selectors\n\nexport {\n    // Common\n    selectTabIndex, selectPrompt, selectStopSymbols, selectApiKey, selectModelName,\n    selectTemperature, selectTopP, selectFrequencyPenalty, selectPresencePenalty,\n    selectMaxTokens, selectApiKeyDialogVisible, selectTemplateDialogVisible,\n    selectCompletionParameters, selectCurrentWorkspaceId, selectEditableWorkspaceName, selectCurrentWorkspaceName,\n    selectWorkspacesList,\n\n    // Modes\n    selectExamples, selectExamplePreviousOutputsStatus,\n    selectVariationsLoadingStatus, selectVariations, selectMaxVariations,\n    selectShowPromptForVariations, selectBasicOutput, selectBasicLoading,\n};\n\n// Async Actions\n\nexport {\n    fetchForCurrentTab, fetchExamplesOutputsAsync, fetchBasicOutputAsync,\n    fetchVariationsAsync, sendMessageInConversationAsync\n};\n\n// Actions\nexport const {\n    updateWorkspaceId, createWorkspace, deleteCurrentWorkspace, updateCurrentWorkspaceName, updateEditableWorkspaceName,\n    editExample, loadOutputForExample, deleteExample, cleanExampleList, markExampleAsLoading, updateExamplePreviousOutputsStatus, loadBasicOutput, setBasicLoading,\n    markAllExamplesAsNotLoading,\n    addVariation, editMaxVariations, cleanVariations, updateShowPromptForVariations, updateVariationsLoadingStatus,\n    setConversationCompletionParams, normalizeConversations, updateConversationLoadingStatus, updateConversationInputValue,\n    updateConversationStartSequence, updateConversationRestartSequence, addMessageInConversation,\n    setConversationInitialPrompt, deleteConversation,\n    addStopSymbol, deleteStopSymbol,\n    editTopP, editFrequencyPenalty, editPresencePenalty,\n    loadTemplate, loadTemplateFromFileData,\n    editPrompt, editApiKey, editModelName, editTemperature, editMaxTokens, updateTabIndex, toggleApiKeyDialog, toggleTemplateDialog } = editorSlice.actions;\n\n// Action Payloads\n","import axios from \"axios\";\nimport {AxiosPromise} from \"axios\";\nimport {CompletionParameters} from \"../slices/editorSlice\";\n\nexport interface ChoiceResult {\n    finish_reason: string;\n    index: number;\n    text: string;\n}\n\nclass GptAPI {\n    static generateCompletions(prompt: string | Array<string>, completionParams: CompletionParameters,\n                               n: number = 1): AxiosPromise {\n        return axios({\n            method: \"POST\",\n            url: `https://api.openai.com/v1/engines/${completionParams.engine}/completions`,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${completionParams.apiKey}`,\n            },\n            data: {\n                \"prompt\": prompt,\n                \"n\": n,\n                \"max_tokens\": completionParams.maxTokens,\n                \"temperature\": completionParams.temperature,\n                \"stop\": completionParams.stop,\n                \"top_p\": completionParams.topP,\n                \"presence_penalty\": completionParams.presencePenalty,\n                \"frequency_penalty\": completionParams.frequencyPenalty\n            }\n        });\n    }\n}\n\nexport default GptAPI;","import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    editExample,\n    deleteExample,\n    cleanExampleList,\n    selectExamplePreviousOutputsStatus\n} from \"../../slices/editorSlice\";\nimport {TextField, Card, CardContent, Box, CircularProgress, Grid, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\n\ninterface Props {\n    ind: number;\n    isLast: boolean;\n    id: string;\n    text: string;\n    isLoading: boolean;\n    output?: string;\n    previousOutput?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    card: {\n        backgroundColor: theme.palette.background.default,\n    }\n}));\n\nfunction Example (props: Props) {\n    const dispatch = useDispatch();\n    const styles = useStyles();\n    const showPreviousOutput = useSelector(selectExamplePreviousOutputsStatus);\n    const handleInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        dispatch(editExample({id: props.id, text: event.currentTarget.value}));\n        dispatch(cleanExampleList());\n    }\n\n    return (\n        <Card className={styles.card}>\n            <CardContent>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"flex-start\"\n                    spacing={1}\n                >\n                    <Grid item xs={10} md={11}>\n                        <Box mb={2}>\n                            <TextField\n                                multiline\n                                type={'text'}\n                                value={props.text}\n                                onChange={handleInputChange}\n                                fullWidth={true}\n                                label={`Example ${props.ind + 1}`}\n                                variant=\"outlined\"\n                            />\n                        </Box>\n                        <Box>\n                            <TextField\n                                multiline\n                                type={'text'}\n                                value={props.output}\n                                fullWidth={true}\n                                label=\"GPT-3 Output\"\n                                variant=\"outlined\"\n                                InputLabelProps={{ shrink: props.output !== undefined }}\n                                disabled\n                            />\n                        </Box>\n                        {(showPreviousOutput && (\n                            <Box mt={2}>\n                                <TextField\n                                    multiline\n                                    type={'text'}\n                                    value={props.previousOutput}\n                                    fullWidth={true}\n                                    label=\"Previous Output\"\n                                    variant=\"outlined\"\n                                    InputLabelProps={{ shrink: props.previousOutput !== undefined }}\n                                    disabled\n                                />\n                            </Box>\n                        ))}\n                    </Grid>\n                    <Grid item xs={1} md={1}>\n                        <Box>\n                            {props.isLoading && <CircularProgress/>}\n\n                            {!props.isLoading && !props.isLast && <IconButton onClick={() => {\n                                dispatch(deleteExample(props.id));\n                                dispatch(cleanExampleList());\n                            }}>\n                                <Delete />\n                            </IconButton>}\n                        </Box>\n                    </Grid>\n                </Grid>\n\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default Example;","import React from 'react';\nimport Example from './Example';\nimport {useSelector} from \"react-redux\";\nimport {selectExamples} from \"../../slices/editorSlice\";\nimport { Grid, Box } from '@material-ui/core';\nimport {makeStyles} from \"@material-ui/styles\";\n\nconst useStyles = makeStyles({\n    gridCard: {\n        width: '100%',\n    },\n});\n\n\nexport default function ExampleCollection() {\n    const examples = useSelector(selectExamples);\n    const styles = useStyles();\n\n    return (\n        <Box>\n            <Grid container\n                  direction=\"column\"\n                  justify=\"flex-start\"\n                  alignItems=\"flex-start\"\n                  spacing={1}\n            >\n                {examples.map((example, ind) => (\n                    <Grid item key={example.id} xs={12} className={styles.gridCard}>\n                        <Example ind={ind} isLast={ind === examples.length - 1} {...example}/>\n                    </Grid>\n                ))}\n            </Grid>\n        </Box>\n    );\n}","import React from 'react';\nimport {useDispatch} from \"react-redux\";\nimport {fetchExamplesOutputsAsync} from \"../../slices/editorSlice\";\nimport { Button } from '@material-ui/core';\n\nexport default function RunExamplesButton() {\n    const dispatch = useDispatch();\n    const fetchOutputs = () => {\n        dispatch(fetchExamplesOutputsAsync());\n    };\n    return (\n        <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={fetchOutputs}>Run</Button>\n    );\n}","import React, {useEffect} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport ExampleCollection from './ExampleCollection';\nimport {\n    cleanExampleList,\n    selectExamplePreviousOutputsStatus,\n    updateExamplePreviousOutputsStatus\n} from \"../../slices/editorSlice\";\nimport {Box, Typography, Card, CardContent, Grid, FormControlLabel, Switch} from \"@material-ui/core\";\nimport RunExamplesButton from \"./RunExamplesButton\";\nimport { useStyles } from '../ModeTabs';\n\n// cleanExampleList\n\nexport default function ExamplesTab() {\n    const dispatch = useDispatch();\n\n    const showPreviousOutputs = useSelector(selectExamplePreviousOutputsStatus);\n    const handlePreviousOutputsSwitchChange = (event: React.ChangeEvent<{}>, value: boolean) => {\n        dispatch(updateExamplePreviousOutputsStatus(value));\n    }\n\n    const styles = useStyles();\n    useEffect(() => {\n        dispatch(cleanExampleList());\n    })\n\n    return (\n        <Box>\n            <Box mb={1}>\n                <Card className={styles.instructionCard}>\n                    <CardContent>\n                        <Typography variant=\"subtitle1\">Multiple Examples</Typography>\n                        <Typography variant=\"body2\">This is a tool to quickly run your prompt on multiple examples.\n                            You can use it for text transformation and classification tasks. Use \"{\"{example}\"}\" key in the prompt and the editor\n                            will replace it with each of the following examples. The tool is useful to understand how changing a prompt and parameters\n                            will impact generated results.\n                        </Typography>\n                        <Box mt={1}>\n                            <RunExamplesButton/>\n                        </Box>\n                        <Box mt={1}>\n                            <Grid container spacing={1} alignItems=\"center\">\n                                <Grid item><FormControlLabel\n                                    control={<Switch value={showPreviousOutputs}\n                                                     onChange={handlePreviousOutputsSwitchChange}\n                                                     name=\"previous-outputs-switch\" color=\"primary\"/>}\n                                    label=\"Show previous outputs\"\n                                /></Grid>\n                            </Grid>\n                        </Box>\n                    </CardContent>\n                </Card>\n            </Box>\n            <ExampleCollection/>\n        </Box>\n    );\n}","import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Button, CircularProgress} from '@material-ui/core';\nimport { makeStyles, createStyles } from '@material-ui/styles';\nimport { green } from '@material-ui/core/colors';\nimport {fetchVariationsAsync, selectVariationsLoadingStatus} from \"../../slices/editorSlice\";\n\nconst useStyles = makeStyles(\n    createStyles({\n        buttonProgress: {\n            color: green[500],\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            marginTop: -12,\n            marginLeft: -12,\n        },\n    }),\n);\n\nexport default function FetchVariationsButton() {\n    const styles = useStyles();\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectVariationsLoadingStatus);\n    const fetchOutputs = () => {\n        dispatch(fetchVariationsAsync());\n    };\n    return (\n        <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={fetchOutputs}\n                disabled={isLoading}\n        >{isLoading && (\n            <CircularProgress size={24} className={styles.buttonProgress}/>\n        )} Generate</Button>\n    );\n}","import React from \"react\";\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {Card, CardContent, Typography, CardActions} from \"@material-ui/core\";\nimport {useSelector} from \"react-redux\";\nimport {selectShowPromptForVariations} from \"../../slices/editorSlice\";\n\ninterface Props {\n    id: string;\n    prompt: string;\n    output: string;\n    temperature: number;\n    maxTokens: number;\n    topP: number;\n    frequencyPenalty: number;\n    presencePenalty: number;\n    modelName: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    card: {\n        backgroundColor: theme.palette.background.default,\n        whiteSpace: \"pre-line\",\n},\n\n    prompt: {},\n\n    output: {\n        //textDecoration: \"underline\",\n    }\n}));\n\nexport default function Variation(props: Props) {\n    const styles = useStyles();\n    const showPromptForVariations = useSelector(selectShowPromptForVariations);\n\n    return <Card className={styles.card}>\n        <CardContent>\n            { showPromptForVariations && (\n                <>\n                    <Typography className={styles.prompt}>{props.prompt}</Typography>\n                    <span role={\"img\"} aria-label={\"brain\"}>🧠️</span>\n                    <Typography className={styles.output} component={'span'}><strong>{props.output}</strong></Typography>\n                </>\n            )}\n            { !showPromptForVariations && (\n                <>\n                    <span role={\"img\"} aria-label={\"brain\"}>🧠️</span>\n                    <Typography className={styles.output} component={'span'}>{props.output}</Typography>\n                </>\n            )}\n        </CardContent>\n        { showPromptForVariations && (\n            <CardActions>\n                <Typography variant=\"caption\">Temperature: {props.temperature}</Typography>\n                <Typography variant=\"caption\">Max tokens: {props.maxTokens}</Typography>\n                <Typography variant=\"caption\">Top P: {props.topP}</Typography>\n                <Typography variant=\"caption\">Frequency penalty: {props.frequencyPenalty}</Typography>\n                <Typography variant=\"caption\">Presence penalty: {props.presencePenalty}</Typography>\n                <Typography variant=\"caption\">Model: {props.modelName}</Typography>\n            </CardActions>\n        )\n        }\n    </Card>;\n}","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {selectVariations} from \"../../slices/editorSlice\";\nimport { Grid, Box } from '@material-ui/core';\nimport {makeStyles} from \"@material-ui/styles\";\nimport Variation from \"./Variation\";\n\nconst useStyles = makeStyles({\n    gridCard: {\n        width: '100%',\n    },\n});\n\n\nexport default function VariationsCollection() {\n    const completions = useSelector(selectVariations);\n    const styles = useStyles();\n\n    return (\n        <Box>\n            <Grid container\n                  direction=\"column\"\n                  justify=\"flex-start\"\n                  alignItems=\"flex-start\"\n                  spacing={1}\n            >\n                {completions.slice().reverse().map(completion => (\n                    <Grid item key={completion.id} xs={12} className={styles.gridCard}>\n                        <Variation {...completion} />\n                    </Grid>\n                ))}\n            </Grid>\n        </Box>\n    );\n}","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {Box, Card, CardContent, Slider, Typography, Button, Grid, Switch, FormControlLabel} from \"@material-ui/core\";\nimport {useStyles} from \"../ModeTabs\";\nimport FetchVariationsButton from \"./FetchVariationsButton\";\nimport VariationsCollection from \"./VariationsCollection\";\nimport {\n    editMaxVariations,\n    selectMaxVariations,\n    cleanVariations,\n    selectShowPromptForVariations,\n    updateShowPromptForVariations,\n} from \"../../slices/editorSlice\";\n\nexport default function VariationsTab() {\n    const styles = useStyles();\n    const dispatch = useDispatch();\n\n    const maxCompletions = useSelector(selectMaxVariations);\n    const handleMaxVariationsChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n        dispatch(editMaxVariations(value as number));\n    }\n\n    const showPrompt = useSelector(selectShowPromptForVariations);\n    const handlePromptSwitchChange = (event: React.ChangeEvent<{}>, value: boolean) => {\n        dispatch(updateShowPromptForVariations(value));\n    }\n\n    return <Box>\n        <Box mb={1}>\n            <Card className={styles.instructionCard}>\n                <CardContent>\n                    <Typography variant=\"subtitle1\">Variations</Typography>\n                    <Typography variant=\"body2\">\n                        This is a tool to generate multiple completions from the same prompt. Use it to explore the variety\n                        of GPT-3 completions and impact of parameters on them. If you like a completion, add it to the prompt\n                        and GPT-3 will generate more similar completions.\n                    </Typography>\n                    <Box mt={1}>\n                        <Typography id=\"max-variations-slider\" gutterBottom>\n                            How many samples to generate (impacts processing time):\n                        </Typography>\n                        <Slider\n                            defaultValue={10}\n                            value={maxCompletions}\n                            onChange={handleMaxVariationsChange}\n                            aria-labelledby=\"max-variations-slider\"\n                            valueLabelDisplay=\"auto\"\n                            step={1}\n                            marks={[{\n                                value: 1,\n                                label: '0',\n                            }, {\n                                value: 15,\n                                label: '15',\n                            }]}\n                            min={1}\n                            max={15}\n                        />\n                    </Box>\n\n                    <Grid container spacing={1} alignItems=\"center\">\n                        <Grid item><FetchVariationsButton/></Grid>\n                        <Grid item><Button\n                            onClick={() => dispatch(cleanVariations())}\n                        >Clean all</Button></Grid>\n                    </Grid>\n                    <Grid container spacing={1} alignItems=\"center\">\n                        <Grid item><FormControlLabel\n                            control={<Switch checked={showPrompt} onChange={handlePromptSwitchChange}\n                                             name=\"variations-prompt-switch\" color=\"primary\"/>}\n                            label=\"Show prompt\"\n                        /></Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        </Box>\n        <VariationsCollection/>\n    </Box>;\n}","import {TabIndex, Example, CompletionParameters} from \"../slices/editorSlice\";\n\ninterface CodeExample {\n    id: string;\n    name: string;\n    text: string;\n    language: string;\n}\n\nenum PythonOutputType {\n    plain,\n    stream,\n    toxicity\n}\n\nexport default function generateCodeExamples(completionParameters: CompletionParameters, tabIndex: TabIndex,\n                                             examples: Array<Example>): Array<CodeExample> {\n    const exampleText = getFirstExampleOrPlaceholder(examples);\n    return [\n        {id: '1', name: \"Python\", language: \"python\", text: generatePythonExample(\n                completionParameters, tabIndex, exampleText, PythonOutputType.plain\n            )},\n        {id: '2', name: \"Python: Streaming\", language: \"python\", text: generatePythonExample(\n                completionParameters, tabIndex, exampleText, PythonOutputType.stream\n            )},\n        {id: '3', name: \"Node.js: Axios\", language: \"javascript\", text: generateNodeJsExample(\n                completionParameters, tabIndex, exampleText\n            )},\n        {id: '4', name: \"Typescript: Axios\", language: \"typescript\", text: generateTypescriptExample(\n                completionParameters, tabIndex, exampleText\n            )},\n        {id: '5', name: \"Bash\", language: \"bash\", text: generateShellExample(\n                completionParameters, tabIndex, exampleText\n            )},\n\n\n        //{name: \"Python: With Toxicity Check\", text: generatePythonExample(\n        //        completionParameters, tabIndex, exampleText, PythonOutputType.toxicity\n        //    )},\n\n        // {name: \"Javascript\", text: generatePythonExampleWithStream(completionParameters, tabIndex)},\n        // {name: \"Javascript: Client-side Streaming\", text: generatePythonExampleWithStream(completionParameters, tabIndex)},\n\n        // {name: \"Javascript: With Toxicity Check\", text: generatePythonExampleWithStream(completionParameters, tabIndex)},\n    ];\n}\n\nfunction generateNodeJsExample(parameters: CompletionParameters, tabIndex: TabIndex, exampleText: string) {\n    switch (tabIndex) {\n        case TabIndex.multipleExamples: {\n            return `var axios = require('axios');\n\nvar example = ${formatJavascriptString(exampleText)};\nvar config = {\n  method: 'post',\n  url: 'https://api.openai.com/v1/engines/${parameters.engine}/completions',\n  headers: { \n    'Content-Type': 'application/json', \n    'Authorization': 'Bearer ${parameters.apiKey}'\n  },\n  data: {\n    'prompt': ${formatJavascriptString(parameters.prompt)}.replace('{example}', example),\n    'max_tokens': ${parameters.maxTokens},\n    'temperature': ${parameters.temperature},\n    'top_p': ${parameters.topP},\n    'n': 1,\n    'stop': ${formatStopSymbolsJavascriptStringOrStringList(parameters.stop)},\n    'presence_penalty': ${parameters.presencePenalty},\n    'frequency_penalty': ${parameters.frequencyPenalty}}\n};\n\naxios(config)\n.then(function (response) {\n  console.log(response.data);\n  console.log(response.data['choices'][0]['text']);\n})\n.catch(function (error) {\n  console.log(error);\n});\n`;\n        }\n        case TabIndex.basic:\n        case TabIndex.conversations:\n        case TabIndex.variations: {\n            return `var axios = require('axios');\n\nvar config = {\n  method: 'post',\n  url: 'https://api.openai.com/v1/engines/${parameters.engine}/completions',\n  headers: { \n    'Content-Type': 'application/json', \n    'Authorization': 'Bearer ${parameters.apiKey}'\n  },\n  data: {\n    'prompt': ${formatJavascriptString(parameters.prompt)},\n    'max_tokens': ${parameters.maxTokens},\n    'temperature': ${parameters.temperature},\n    'top_p': ${parameters.topP},\n    'n': 1,\n    'stop': ${formatStopSymbolsJavascriptStringOrStringList(parameters.stop)},\n    'presence_penalty': ${parameters.presencePenalty},\n    'frequency_penalty': ${parameters.frequencyPenalty}}\n};\n\naxios(config)\n.then(function (response) {\n  console.log(response.data);\n  console.log(response.data['choices'][0]['text']);\n})\n.catch(function (error) {\n  console.log(error);\n});\n`;\n        }\n    }\n\n    return '';\n}\n\nfunction generateTypescriptExample(parameters: CompletionParameters, tabIndex: TabIndex, exampleText: string) {\n    switch (tabIndex) {\n        case TabIndex.multipleExamples: {\n            return `import axios from 'axios'\n\nconst example = ${formatJavascriptString(exampleText)}\n\naxios({\n  method: 'post',\n  url: 'https://api.openai.com/v1/engines/${parameters.engine}/completions',\n  headers: { \n    'Content-Type': 'application/json', \n    'Authorization': 'Bearer ${parameters.apiKey}'\n  },\n  data: {\n    'prompt': ${formatJavascriptString(parameters.prompt)}.replace('{example}', example),\n    'max_tokens': ${parameters.maxTokens},\n    'temperature': ${parameters.temperature},\n    'top_p': ${parameters.topP},\n    'n': 1,\n    'stop': ${formatStopSymbolsJavascriptStringOrStringList(parameters.stop)},\n    'presence_penalty': ${parameters.presencePenalty},\n    'frequency_penalty': ${parameters.frequencyPenalty}}\n})\n.then(response => {\n  console.log(response.data)\n  console.log(response.data['choices'][0]['text'])\n})\n.catch(error => {\n  console.log(error)\n});\n`;\n        }\n        case TabIndex.basic:\n        case TabIndex.conversations:\n        case TabIndex.variations: {\n            return `import axios from 'axios' \n\naxios({\n  method: 'post',\n  url: 'https://api.openai.com/v1/engines/${parameters.engine}/completions',\n  headers: { \n    'Content-Type': 'application/json', \n    'Authorization': 'Bearer ${parameters.apiKey}'\n  },\n  data: {\n    'prompt': ${formatJavascriptString(parameters.prompt)},\n    'max_tokens': ${parameters.maxTokens},\n    'temperature': ${parameters.temperature},\n    'top_p': ${parameters.topP},\n    'n': 1,\n    'stop': ${formatStopSymbolsJavascriptStringOrStringList(parameters.stop)},\n    'presence_penalty': ${parameters.presencePenalty},\n    'frequency_penalty': ${parameters.frequencyPenalty}}\n})\n.then(function (response) {\n  console.log(response.data)\n  console.log(response.data['choices'][0]['text'])\n})\n.catch(function (error) {\n  console.log(error)\n});\n`;\n        }\n    }\n\n    return '';\n}\n\nfunction generateShellExample(parameters: CompletionParameters, tabIndex: TabIndex, exampleText: string) {\n    switch (tabIndex) {\n        case TabIndex.multipleExamples: {\n            return `curl --location --request POST 'https://api.openai.com/v1/engines/davinci/completions' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer ${parameters.apiKey}' \\\\\n--data-raw '${replaceAllOccurrences(JSON.stringify({\n                'prompt': parameters.prompt.replace('{example}', exampleText),\n                'max_tokens': parameters.maxTokens,\n                'temperature': parameters.temperature,\n                'top_p': parameters.topP,\n                'n': 1,\n                'stop': formatStopSymbolsForShell(parameters.stop),\n                'presence_penalty': parameters.presencePenalty,\n                'frequency_penalty': parameters.frequencyPenalty\n            }, null, 1), \"'\", \"\\\\'\")}'`;\n        }\n        case TabIndex.basic:\n        case TabIndex.conversations:\n        case TabIndex.variations: {\n            return `curl --location --request POST 'https://api.openai.com/v1/engines/davinci/completions' \\\\\n--header 'Content-Type: application/json' \\\\\n--header 'Authorization: Bearer ${parameters.apiKey}' \\\\\n--data-raw '${replaceAllOccurrences(JSON.stringify({\n                'prompt': parameters.prompt,\n                'max_tokens': parameters.maxTokens,\n                'temperature': parameters.temperature,\n                'top_p': parameters.topP,\n                'n': 1,\n                'stop': formatStopSymbolsForShell(parameters.stop),\n                'presence_penalty': parameters.presencePenalty,\n                'frequency_penalty': parameters.frequencyPenalty\n            }, null, 1), \"'\", \"\\\\'\")}'`;\n        }\n    }\n\n    return '';\n}\n\nfunction generatePythonExample(parameters: CompletionParameters, tabIndex: TabIndex, exampleText: string,\n                               outputType: PythonOutputType) {\n    let completionVariableName, additionalArguments, outputCode;\n    switch (outputType) {\n        case PythonOutputType.plain: {\n            completionVariableName = 'completion';\n            additionalArguments = '';\n            outputCode = `choice = completion[\"choices\"][0]\nprint(\"[choice object]\", choice)\nprint(\"[choice text]\", choice[\"text\"])`;\n            break;\n        }\n        case PythonOutputType.stream: {\n            completionVariableName = 'parts';\n            additionalArguments = `\n  stream=True`;\n            outputCode = `for completion in parts:\n  choice = completion[\"choices\"][0]\n  print(\"[choice object]\", choice)\n  print(\"[choice text]\", choice[\"text\"])`;\n            break;\n        }\n        case PythonOutputType.toxicity: {\n            completionVariableName = 'completion';\n            additionalArguments = '';\n            outputCode = `choice = completion[\"choices\"][0]\nprint(\"[choice object]\", choice)\nprint(\"[choice text]\", choice[\"text\"])\n\nfilter_completion = openai.Completion.create(\n  engine=\"davinci\",\n  max_tokens=1,\n  prompt=f\"<|endoftext|>{choice['text']}\\\\n--\\\\nLabel: \",\n  temperature=0.0,\n  top_p=0,\n)\nfilter_result = completion[\"choices\"][0][\"text\"]\nif filter_result == \"0\":\n    print(\"[content status] safe\")\nif filter_result == \"1\":\n    print(\"[content status] non-toxic warning\")\nif filter_result == \"2\":\n    print(\"[content status] toxic\")`;\n            break;\n        }\n\n    }\n    switch (tabIndex) {\n        case TabIndex.multipleExamples: {\n            return `import openai\nopenai.api_key = \"${parameters.apiKey}\"\nprompt = ${formatPythonString(parameters.prompt)}\nexample = ${formatPythonString(exampleText)}\n${completionVariableName} = openai.Completion.create(\n  engine=\"${parameters.engine}\",\n  n=1,\n  max_tokens=${parameters.maxTokens},\n  stop=${formatStopSymbolsPythonStringOrStringList(parameters.stop)},\n  prompt=prompt.replace(\"{example}\", example),\n  temperature=${parameters.temperature},\n  top_p=${parameters.topP},\n  presence_penalty=${parameters.presencePenalty},\n  frequency_penalty=${parameters.frequencyPenalty},${additionalArguments}\n)\n${outputCode}\n`;\n        }\n        case TabIndex.basic:\n        case TabIndex.conversations:\n        case TabIndex.variations: {\n            return `import openai\nopenai.api_key = \"${parameters.apiKey}\"\n${completionVariableName} = openai.Completion.create(\n  engine=\"${parameters.engine}\",\n  n=1,\n  max_tokens=${parameters.maxTokens},\n  stop=${formatStopSymbolsPythonStringOrStringList(parameters.stop)},\n  prompt=${formatPythonString(parameters.prompt)},\n  temperature=${parameters.temperature},\n  top_p=${parameters.topP},\n  presence_penalty=${parameters.presencePenalty},\n  frequency_penalty=${parameters.frequencyPenalty},\n  echo=True,${additionalArguments}\n)\n${outputCode}\n`;\n        }\n    }\n\n    return '';\n}\n\n// Shell helpers\n\nfunction formatStopSymbolsForShell(value: Array<string> | string) {\n    if (value instanceof Array) {\n        return value.map(formatStopSymbolStringForCode);\n    } else {\n        return formatStopSymbolStringForCode(value);\n    }\n}\n\n// Javascript helpers\n\nfunction formatJavascriptString(value: string) {\n    if (value.includes(\"\\n\")) {\n        const formattedString = replaceAllOccurrences(value,'`', '\\\\`');\n        return `\\`${formattedString}\\``;\n    } else {\n        const formattedString = replaceAllOccurrences(value, \"'\", \"\\\\'\");\n        return `'${formattedString}'`;\n    }\n}\n\nfunction formatStopSymbolsJavascriptStringOrStringList(value: Array<string> | string) {\n    if (value instanceof Array) {\n        return formatJavascriptStringList(value.map(formatStopSymbolStringForCode));\n    } else {\n        return formatJavascriptString(formatStopSymbolStringForCode(value));\n    }\n}\n\nfunction formatJavascriptStringList(value: Array<string>) {\n    return `[${value.map(value => `'${replaceAllOccurrences(value, \"'\", \"\\\\'\")}'`).join(', ')}]`;\n}\n\n// Python helpers\n\nfunction formatStopSymbolsPythonStringOrStringList(value: Array<string> | string) {\n    if (value instanceof Array) {\n        return formatPythonStringList(value.map(formatStopSymbolStringForCode));\n    } else {\n        return formatPythonString(formatStopSymbolStringForCode(value));\n    }\n}\n\nfunction formatPythonStringList(value: Array<string>) {\n    return `[${value.map(value => `\"${value}\"`).join(', ')}]`;\n}\n\nfunction formatPythonString(value: string) {\n    if (value.includes(\"\\n\")) {\n        const formattedString = replaceAllOccurrences(value, '\"\"\"', '\\\\\"\\\\\"\\\\\"');\n        return `\"\"\"${formattedString}\"\"\"`;\n    } else {\n        const formattedString = replaceAllOccurrences(value, '\"', '\\\\\"');\n        return `\"${formattedString}\"`;\n    }\n}\n\n// Common helpers\n\nfunction getFirstExampleOrPlaceholder(examples: Array<Example>): string {\n    if (examples.length > 0 && examples[0].text.length > 0) {\n        return examples[0].text;\n    }\n    return 'example';\n}\n\nfunction formatStopSymbolStringForCode(value: string) {\n    return `${replaceAllOccurrences(value, '\\n', '\\\\n')}`;\n}\n\nfunction replaceAllOccurrences(value: string, replace_from: string, replace_to: string) {\n    return value.split(replace_from).join(replace_to);\n}\n\n\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog, { DialogProps } from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport generateCodeExamples from '../libs/codeGenerator';\nimport {useSelector} from \"react-redux\";\nimport {selectExamples, selectTabIndex, selectCompletionParameters} from \"../slices/editorSlice\";\nimport { Box, Theme, IconButton, FormControl, Select } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n    fullWidth: {\n        width: '100%',\n    }\n}));\n\n\nexport default function CodeGeneratorButton() {\n    const classes = useStyles();\n\n    const completionParameters = useSelector(selectCompletionParameters);\n    const tabIndex = useSelector(selectTabIndex);\n    const examples = useSelector(selectExamples);\n\n    const [open, setOpen] = React.useState(false);\n    const [scroll, setScroll] = React.useState<DialogProps['scroll']>('paper');\n\n    let defaultExampleId;\n    const codeExamples = generateCodeExamples(completionParameters, tabIndex, examples);\n    if (codeExamples.length === 0) {\n        defaultExampleId = '';\n    } else {\n        defaultExampleId = codeExamples[0].id;\n    }\n\n    const [selectedExample, setExample] = React.useState(defaultExampleId);\n    const handleSelectChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setExample(event.target.value as string);\n    }\n\n    const handleClickOpen = (scrollType: DialogProps['scroll']) => () => {\n        setOpen(true);\n        setScroll(scrollType);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const descriptionElementRef = React.useRef<HTMLElement>(null);\n    React.useEffect(() => {\n        if (open) {\n            const { current: descriptionElement } = descriptionElementRef;\n            if (descriptionElement !== null) {\n                descriptionElement.focus();\n            }\n        }\n    }, [open]);\n\n    return (\n        <div>\n            <Button variant=\"outlined\" onClick={handleClickOpen('paper')}>Generate Code</Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                scroll={scroll}\n                fullWidth={true}\n                maxWidth={'lg'}\n            >\n                <DialogTitle id=\"scroll-dialog-title\">\n                    Code Generator\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={handleClose}>\n                        <CloseIcon />\n                    </IconButton>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <DialogContentText\n                        id=\"scroll-dialog-description\"\n                        ref={descriptionElementRef}\n                        tabIndex={-1}\n                    >\n                        <FormControl className={classes.fullWidth}>\n                            <Select\n                                native\n                                value={selectedExample}\n                                onChange={handleSelectChange}\n                                className={classes.fullWidth}>\n                            >\n                                {generateCodeExamples(completionParameters, tabIndex, examples).map((codeExample) => (\n                                    <option key={codeExample.id} value={codeExample.id}>{codeExample.name}</option>\n                                ))}\n                            </Select>\n                        </FormControl>\n\n                        {generateCodeExamples(completionParameters, tabIndex, examples)\n                            .filter((codeExample) => codeExample.id === selectedExample)\n                            .map((codeExample) => (\n                            <Box key={codeExample.id}>\n                                <SyntaxHighlighter language={codeExample.language}>\n                                    {codeExample.text}\n                                </SyntaxHighlighter>\n                            </Box>\n                        ))}\n                    </DialogContentText>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}","import React from \"react\";\nimport {ConversationCompletionParameters} from \"../../slices/editorSlice\";\nimport {Grid, TextField} from \"@material-ui/core\";\nimport ChipInput from \"material-ui-chip-input\";\n\ninterface Props {\n    parameters: ConversationCompletionParameters;\n}\n\n// engine: string;\n//     maxTokens: number;\n//     stop: string | Array<string>;\n//     prompt: string;\n//     temperature: number;\n//     topP: number;\n//     presencePenalty: number;\n//     frequencyPenalty: number;\n\nexport default function CompletionParameters(props: Props) {\n    let stopSymbols: Array<string>;\n    if (props.parameters.stop === \"\") {\n        stopSymbols = [];\n    } else if (typeof props.parameters.stop === 'string') {\n        stopSymbols = [props.parameters.stop as string];\n    } else {\n        stopSymbols = props.parameters.stop as Array<string>;\n    }\n    return <>\n        <Grid container direction={'column'} spacing={1}>\n            <Grid item>\n                <Grid container spacing={1}>\n                    <Grid item><TextField disabled label={'Model'} value={props.parameters.engine} /></Grid>\n                    <Grid item><TextField disabled label={'Response length'} value={props.parameters.engine} /></Grid>\n                    <Grid item><TextField disabled label={'Temperature'} value={props.parameters.temperature} /></Grid>\n                </Grid>\n            </Grid>\n            <Grid item>\n                <Grid container spacing={1}>\n                    <Grid item><TextField disabled label={'Top P'} value={props.parameters.topP} /></Grid>\n                    <Grid item><TextField disabled label={'Presence Penalty'} value={props.parameters.presencePenalty} /></Grid>\n                    <Grid item><TextField disabled label={'Frequency Penalty'} value={props.parameters.frequencyPenalty} /></Grid>\n                </Grid>\n            </Grid>\n            <Grid item>\n                <ChipInput disabled label={'Stop symbols'} value={stopSymbols.map(symbol => {\n                    return symbol.split('\\n').join('\\\\n');\n                })}/>\n            </Grid>\n        </Grid>\n    </>;\n}","import React from \"react\";\nimport {IconButton, InputAdornment, TextField} from \"@material-ui/core\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootState} from \"../../store\";\nimport {\n    normalizeConversations,\n    sendMessageInConversationAsync,\n    updateConversationInputValue\n} from \"../../slices/editorSlice\";\n\ninterface Props {\n    conversationId: string;\n    afterSend: () => void,\n}\n\nexport default function Input(props: Props) {\n    const dispatch = useDispatch();\n\n    const inputValue = useSelector(\n        (state: RootState) => {\n            const workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!;\n            return workspace.conversations.find(c => c.id === props.conversationId)!.inputValue;\n        }\n    );\n    const hasStarted = useSelector(\n        (state: RootState) => {\n            const workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!;\n            return workspace.conversations.find(c => c.id === props.conversationId)!.parts.some(c => c.submitted);\n        }\n    );\n    const onSend = () => {\n        dispatch(sendMessageInConversationAsync(props.conversationId));\n        props.afterSend();\n        dispatch(normalizeConversations());\n    }\n\n    const onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        dispatch(updateConversationInputValue({conversationId: props.conversationId, inputValue: event.currentTarget.value}));\n    }\n    return <TextField multiline\n                      label={'Message (Cmd+Enter to send)'}\n                      InputLabelProps={{\n                          shrink: true,\n                      }}\n                      placeholder={hasStarted ? 'Your response' : 'Start a conversation'}\n                      value={inputValue}\n                      onChange={onInputChange}\n                      onKeyDown={(event: React.KeyboardEvent<HTMLDivElement>) => {\n                          if (event.metaKey && event.key === 'Enter') {\n                              onSend();\n                          }\n                      }}\n                      onKeyUp={(event: React.KeyboardEvent<HTMLDivElement>) => {\n                          if (event.ctrlKey && event.key === 'Enter') {\n                              onSend();\n                          }\n                      }}\n                      variant={'outlined'}\n                      fullWidth={true}\n                      InputProps={{\n                          endAdornment: (<InputAdornment position=\"end\">\n                              <IconButton edge=\"end\" onClick={onSend}>\n                                  <SendIcon />\n                              </IconButton>\n                          </InputAdornment>)\n                      }}\n    />;\n}","import React, {createRef, useEffect} from \"react\";\nimport {Card, CardActions, CardContent, Typography, TextField, Grid, Box, Paper, AccordionDetails, AccordionSummary, Accordion, IconButton} from \"@material-ui/core\";\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { RootState } from \"../../store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    ConversationPartSource,\n    selectPrompt,\n    deleteConversation, selectCompletionParameters, updateConversationRestartSequence, updateConversationStartSequence,\n} from \"../../slices/editorSlice\";\nimport {Delete} from \"@material-ui/icons\";\nimport CompletionParameters from \"./CompletionParameters\";\nimport Input from \"./Input\";\n\ninterface Props {\n    id: string;\n    ind: number;\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    card: {\n        backgroundColor: theme.palette.background.default,\n        width: '100%',\n    },\n    settingField: {\n        minWidth: '250px',\n    },\n    generatedText: {\n        whiteSpace: 'pre-line',\n        display: 'inline',\n        fontWeight: 800,\n    },\n    promptedText: {\n        whiteSpace: 'pre-line',\n        display: 'inline',\n        fontWeight: 400,\n    },\n    conversationBox: {\n        minHeight: '400px',\n        maxHeight: '400px',\n        overflowY: 'scroll'\n    },\n    responseInput: {\n        width: '100%'\n    }\n}));\n\nexport default function Conversation(props: Props) {\n    const styles = useStyles();\n    const dispatch = useDispatch();\n    const prompt = useSelector(selectPrompt);\n    const globalCompletionParameters = useSelector(selectCompletionParameters);\n    const conversation = useSelector((state: RootState) => {\n        const workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!;\n        return workspace.conversations.find(c => c.id === props.id)!;\n    });\n\n    const hasStarted = conversation.parts.some(c => c.submitted);\n\n    useEffect(() => {\n        conversationBottom.current!.scrollTop = conversationBottom.current!.scrollHeight;\n    });\n\n    const conversationBottom = createRef<HTMLDivElement>();\n\n    return <Card className={styles.card}>\n        <CardContent>\n            <Grid container alignItems={'center'} justify={'space-between'}>\n                <Grid item><Typography>\n                    {!hasStarted && (\n                        \"New Conversation\"\n                    )}\n                    {hasStarted && (\n                        <Box>\n                            <Typography component={'span'}>Conversation #{props.ind}</Typography><br/>\n                            <Typography variant={'caption'} component={'span'}>The prompt and parameters are locked.</Typography>\n                        </Box>\n                    )}\n                </Typography></Grid>\n                <Grid item>\n                    {hasStarted && (\n                        <IconButton onClick={() => {\n                            dispatch(deleteConversation(props.id));\n                        }}>\n                            <Delete />\n                        </IconButton>\n                    )}\n                </Grid>\n            </Grid>\n            <Box mt={1} className={styles.conversationBox}>\n                <Paper className={styles.conversationBox} ref={conversationBottom}>\n                    <Box ml={1} mt={1}>\n                        {hasStarted && (<>\n                            <Typography component={'span'} className={styles.promptedText}>{conversation.initialPrompt}</Typography>\n                                {conversation.parts.map(part => (<>\n                                    {part.source === ConversationPartSource.gpt && <Typography component={'span'} className={styles.generatedText}>{part.text}</Typography>}\n                                    {part.source === ConversationPartSource.user && <Typography component={'span'} className={styles.promptedText}>{part.text}</Typography>}\n                                </>))}\n                        </>)}\n                        {!hasStarted && (<>\n                            <Typography component={'span'} className={styles.promptedText}>{prompt}</Typography>\n                            <Typography component={'span'} className={styles.promptedText}>{conversation.restartSequence}</Typography>\n                        </>)}\n                        <div />\n                    </Box>\n                </Paper>\n            </Box>\n            <Box mt={2} className={styles.responseInput}>\n                <Input conversationId={props.id} afterSend={() => {\n                    conversationBottom.current!.scrollTop = conversationBottom.current!.scrollHeight;\n                }}/>\n            </Box>\n            <Box mt={1}>\n                <Accordion>\n                    <AccordionSummary\n                        expandIcon={<ExpandMoreIcon />}\n                        aria-controls=\"panel1a-content\"\n                        id=\"panel1a-header\"\n                    >\n                        <Typography>Parameters</Typography>\n                    </AccordionSummary>\n                    <AccordionDetails>\n                        <Typography>\n                            <Grid container spacing={1}>\n                                <Grid item>\n                                    <TextField\n                                        value={conversation.restartSequence.split('\\n').join('\\\\n')}\n                                        onChange={(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n                                            dispatch(updateConversationRestartSequence({\n                                                conversationId: props.id,\n                                                restartSequence: event.currentTarget.value.split('\\\\n').join('\\n')\n                                            }));\n                                        }}\n                                        className={styles.settingField}\n                                        label={'Before User Input'}\n                                        variant={'outlined'}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <TextField\n                                        value={conversation.startSequence.split('\\n').join('\\\\n')}\n                                        onChange={(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n                                            dispatch(updateConversationStartSequence({\n                                                conversationId: props.id,\n                                                startSequence: event.currentTarget.value.split('\\\\n').join('\\n')\n                                            }));\n                                        }}\n                                        className={styles.settingField}\n                                        label={'Before GPT-3 Completion'}\n                                        variant={'outlined'}\n                                    />\n                                </Grid>\n                            </Grid>\n                            <Box mt={1}>\n                                {conversation.completionParams === undefined && (\n                                    <CompletionParameters parameters={globalCompletionParameters} />\n                                )}\n                                {conversation.completionParams !== undefined && (\n                                    <CompletionParameters parameters={conversation.completionParams} />\n                                )}\n                            </Box>\n                        </Typography>\n                    </AccordionDetails>\n                </Accordion>\n            </Box>\n\n        </CardContent>\n        <CardActions>\n        </CardActions>\n    </Card>;\n}\n","import React from \"react\";\nimport {Box, Grid} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useSelector} from \"react-redux\";\nimport Conversation from \"./Conversation\";\nimport {RootState} from \"../../store\";\n\nconst useStyles = makeStyles({\n    gridItem: {\n        width: '100%',\n    },\n});\n\nexport default function ConversationsTab() {\n    const styles = useStyles();\n    const conversationIds = useSelector((state: RootState) => {\n        const workspace = state.editor.present.workspaces.find(w => w.id === state.editor.present.currentWorkspaceId)!;\n        return workspace.conversations.map(c => c.id);\n    });\n\n    return <Box>\n        <Grid container\n              direction=\"column\"\n              justify=\"flex-start\"\n              alignItems=\"flex-start\"\n              spacing={1}>\n            {conversationIds.map((conversationId, ind) => (\n                <Grid item key={conversationId} className={styles.gridItem}>\n                    <Conversation id={conversationId} ind={conversationIds.length - ind} />\n                </Grid>\n            ))}\n        </Grid>\n    </Box>;\n}","import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    fetchBasicOutputAsync,\n    selectBasicLoading,\n    selectBasicOutput,\n} from \"../../slices/editorSlice\";\nimport {Box, Button, Card, CardContent, TextField, Typography} from \"@material-ui/core\";\nimport {useStyles} from '../ModeTabs';\n\nexport default function BasicTab() {\n    const dispatch = useDispatch();\n\n    const styles = useStyles();\n\n    const fetchOutputs = () => {\n        dispatch(fetchBasicOutputAsync());\n    };\n\n    const basicOutput = useSelector(selectBasicOutput);\n    const basicLoading = useSelector(selectBasicLoading);\n\n    return (\n        <Box>\n            <Box mb={1}>\n                <Card className={styles.instructionCard}>\n                    <CardContent>\n                        <Typography variant=\"subtitle1\">Simple</Typography>\n                        <Typography variant=\"body2\">This is a basic tool to explore the general idea of GPT-3. GPT-3 will try to continue text you wrote in the prompt field and will display the result in the field below.</Typography>\n                        <Box mt={1}>\n                            <Button\n                                variant=\"contained\"\n                                size=\"large\"\n                                color=\"primary\"\n                                onClick={fetchOutputs}\n                                disabled={basicLoading}\n                            >{basicLoading ? 'Processing...' : 'Run'}</Button>\n                        </Box>\n                    </CardContent>\n                </Card>\n            </Box>\n            <Box mb={1}>\n                <Card className={styles.instructionCard}>\n                    <CardContent>\n                        <TextField\n                            aria-readonly={\"true\"}\n                            label=\"Output\"\n                            variant=\"outlined\"\n                            fullWidth={true}\n                            multiline\n                            rows={9}\n                            rowsMax={100}\n                            value={basicOutput}\n                            InputProps={{\n                                readOnly: true,\n                            }}\n                            placeholder={\"Resulting text will appear here\"}\n                        />\n                    </CardContent>\n                </Card>\n            </Box>\n        </Box>\n    );\n}","import React from 'react';\nimport {Grid, Hidden, AppBar, Tabs, Tab, Typography, Box} from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport ExamplesTab from \"./examples/ExamplesTab\";\nimport VariationsTab from './variations/VariationsTab';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectTabIndex, updateTabIndex, TabIndex} from \"../slices/editorSlice\";\nimport CodeGeneratorButton from './CodeGeneratorButton';\nimport ConversationsTab from './conversations/ConversationsTab';\nimport BasicTab from \"./basic/BasicTab\";\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    <Typography component={'span'}>{children}</Typography>\n                </Box>\n            )}\n        </div>\n    );\n}\n\nfunction a11yProps(index: any) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    instructionCard: {\n        backgroundColor: theme.palette.background.default\n    },\n    additionalItemsGridItem: {\n        marginRight: \"10px\",\n    }\n}));\n\nexport default function ModeTabs() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const tabIndex = useSelector(selectTabIndex);\n\n    const handleTabIndexChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        dispatch(updateTabIndex(newValue));\n    };\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Grid\n                    justify=\"space-between\" // Add it here :)\n                    alignItems=\"center\"\n                    container\n                    spacing={1}\n                >\n                    <Grid item>\n                        <Tabs value={tabIndex} onChange={handleTabIndexChange} aria-label=\"simple tabs example\">\n                            <Tab label=\"Simple\" {...a11yProps(TabIndex.basic)} />\n                            <Tab label=\"Examples\" {...a11yProps(TabIndex.multipleExamples)} />\n                            <Tab label=\"Variations\" {...a11yProps(TabIndex.variations)} />\n                            <Tab label=\"Conversations\" {...a11yProps(TabIndex.conversations)} />\n                        </Tabs>\n                    </Grid>\n                    <Hidden smDown>\n                        <Grid item className={classes.additionalItemsGridItem}>\n                            <CodeGeneratorButton/>\n                        </Grid>\n                    </Hidden>\n                </Grid>\n            </AppBar>\n            <TabPanel value={tabIndex} index={TabIndex.basic}>\n                <BasicTab/>\n            </TabPanel>\n            <TabPanel value={tabIndex} index={TabIndex.multipleExamples}>\n                <ExamplesTab/>\n            </TabPanel>\n            <TabPanel value={tabIndex} index={TabIndex.variations}>\n                <VariationsTab/>\n            </TabPanel>\n            <TabPanel value={tabIndex} index={TabIndex.conversations}>\n                <ConversationsTab/>\n            </TabPanel>\n        </div>\n    );\n}","import React from 'react';\nimport AddIcon from '@material-ui/icons/Add';\nimport {IconButton} from \"@material-ui/core\";\nimport { useDispatch } from 'react-redux';\nimport { createWorkspace } from '../../slices/editorSlice';\nimport {ActionCreators} from \"redux-undo\";\n\nexport default function CreateButton() {\n    const dispatch = useDispatch();\n    const onAdd = () => {\n        dispatch(createWorkspace());\n        dispatch(ActionCreators.clearHistory())\n    };\n\n    return <IconButton aria-label=\"close\" onClick={onAdd} size={'small'}>\n        <AddIcon/>\n    </IconButton>;\n}","import React from 'react';\nimport { Dialog, DialogTitle, TextField, DialogContent, DialogActions, Button } from '@material-ui/core';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n    selectEditableWorkspaceName,\n    updateCurrentWorkspaceName,\n    updateEditableWorkspaceName\n} from '../../slices/editorSlice';\nimport {ActionCreators} from \"redux-undo\";\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function EditPopup(props: Props) {\n    const dispatch = useDispatch();\n    const editableName = useSelector(selectEditableWorkspaceName);\n    const onSave = () => {\n        dispatch(updateCurrentWorkspaceName())\n        dispatch(ActionCreators.clearHistory())\n        props.onClose();\n    };\n\n    return <Dialog open={props.open} onClose={props.onClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Edit</DialogTitle>\n        <DialogContent>\n            <TextField\n                autoFocus\n                value={editableName}\n                margin=\"dense\"\n                id=\"name\"\n                label=\"Name\"\n                onChange={(event: React.FormEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n                    dispatch(updateEditableWorkspaceName(event.currentTarget.value));\n                }}\n                fullWidth\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={props.onClose} color=\"primary\">\n                Cancel\n            </Button>\n            <Button onClick={onSave} color=\"primary\">\n                Save\n            </Button>\n        </DialogActions>\n    </Dialog>;\n}\n","import React from 'react';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {IconButton} from \"@material-ui/core\";\nimport EditPopup from \"./EditPopup\";\n\nexport default function EditButton() {\n    const [isPopupOpen, setPopupOpen] = React.useState(false);\n    const openPopup = () => {\n        setPopupOpen(true);\n    };\n\n    return <>\n        <IconButton aria-label=\"close\" onClick={openPopup} size={'small'}>\n            <EditIcon />\n        </IconButton>\n        <EditPopup open={isPopupOpen} onClose={() => {\n            setPopupOpen(false);\n        }} />\n    </>;\n}","import React from 'react';\nimport {\n    Dialog,\n    DialogContent,\n    DialogActions,\n    Button,\n    DialogContentText\n} from '@material-ui/core';\nimport {useDispatch} from \"react-redux\";\nimport { deleteCurrentWorkspace } from '../../slices/editorSlice';\nimport {ActionCreators} from \"redux-undo\";\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function DeletePopup(props: Props) {\n    const dispatch = useDispatch();\n    const onDelete = () => {\n        dispatch(deleteCurrentWorkspace());\n        dispatch(ActionCreators.clearHistory())\n        props.onClose();\n    };\n    return <Dialog open={props.open} onClose={props.onClose} aria-labelledby=\"form-dialog-title\">\n        <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n                This action cannot be undone. This will permanently delete the draft with the prompt, parameters, examples, creative generations.\n            </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                Cancel\n            </Button>\n            <Button onClick={onDelete} color=\"primary\" >\n                Delete\n            </Button>\n        </DialogActions>\n    </Dialog>;\n}\n","import React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {IconButton} from \"@material-ui/core\";\nimport DeletePopup from \"./DeletePopup\";\n\nexport default function DeleteButton() {\n    const [isPopupOpen, setPopupOpen] = React.useState(false);\n    const openPopup = () => {\n        setPopupOpen(true);\n    };\n\n    return <>\n        <IconButton aria-label=\"close\" onClick={openPopup} size={'small'}>\n            <DeleteIcon />\n        </IconButton>\n        <DeletePopup open={isPopupOpen} onClose={() => {\n            setPopupOpen(false);\n        }} />\n    </>;\n}","import React from 'react';\nimport { Select, Grid } from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport CreateButton from './CreateButton';\nimport EditButton from \"./EditButton\";\nimport DeleteButton from \"./DeleteButton\";\nimport {selectWorkspacesList, selectCurrentWorkspaceId, updateWorkspaceId} from \"../../slices/editorSlice\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport { ActionCreators } from 'redux-undo';\n\nconst useStyles = makeStyles({\n    selectGridItem: {\n        width: '150px',\n    },\n});\n\nexport default function WorkspaceSelector() {\n    const styles = useStyles();\n    const dispatch = useDispatch();\n    const workspaceId = useSelector(selectCurrentWorkspaceId);\n    const workspaces = useSelector(selectWorkspacesList);\n\n    const handleSelectChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        dispatch(updateWorkspaceId(event.target.value as string));\n        dispatch(ActionCreators.clearHistory())\n    }\n    return <Grid container alignItems={'center'} spacing={1}>\n        <Grid item className={styles.selectGridItem}>\n            <Select\n                native\n                value={workspaceId}\n                fullWidth={true}\n                onChange={handleSelectChange}\n            >\n                {workspaces.map((workspace) => (\n                    <option key={workspace.id} value={workspace.id}>{workspace.name}</option>\n                ))}\n            </Select>\n        </Grid>\n        <Grid item>\n            <CreateButton/>\n        </Grid>\n        <Grid item>\n            <EditButton/>\n        </Grid>\n        <Grid item>\n            <DeleteButton/>\n        </Grid>\n\n    </Grid>;\n}\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Button} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport {\n    selectFrequencyPenalty, selectMaxTokens, selectModelName,\n    selectPresencePenalty,\n    selectPrompt, selectStopSymbols,\n    selectTemperature,\n    selectTopP\n} from \"../../slices/editorSlice\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\n\ninterface Props {\n    className: string;\n}\n\nexport default function DownloadButton(props: Props) {\n    const prompt = useSelector(selectPrompt);\n    const temperature = useSelector(selectTemperature);\n    const topP = useSelector(selectTopP);\n    const frequencyPenalty = useSelector(selectFrequencyPenalty);\n    const presencePenalty = useSelector(selectPresencePenalty);\n    const maxTokens = useSelector(selectMaxTokens);\n    const stopSymbols = useSelector(selectStopSymbols);\n    const modelName = useSelector(selectModelName);\n\n    useHotkeys('ctrl+s,cmd+s', (event) => {\n        event.preventDefault();\n        handleSaveAndDownload();\n    });\n\n    const handleSaveAndDownload = () => {\n        const element = document.createElement(\"a\");\n        const savedStopSymbols = stopSymbols.map(symbol => {\n            return symbol.split('\\\\n').join('\\n');\n        });\n        const file = new Blob([\n            JSON.stringify({prompt, temperature, topP,\n                frequencyPenalty, presencePenalty,\n                maxTokens, stopSymbols: savedStopSymbols, modelName,\n            })\n        ], {type: 'text/plain'});\n        element.href = URL.createObjectURL(file);\n        element.download = `gpt3_workspace_${Math.trunc(Date.now() / 1000)}.json`;\n        document.body.appendChild(element);\n        element.click();\n    }\n\n    return <Button\n        variant=\"outlined\"\n        color=\"default\"\n        className={props.className}\n        size={'small'}\n        startIcon={<SaveIcon />}\n        onClick={handleSaveAndDownload}\n    >\n        Download\n    </Button>;\n}\n","import React from 'react';\n// @ts-ignore\nimport Files from \"react-files\";\nimport {Button} from \"@material-ui/core\";\nimport {useDispatch} from \"react-redux\";\nimport {loadTemplateFromFileData, LoadTemplateFromFileDataActionPayload} from \"../../slices/editorSlice\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\n\ninterface Props {\n    className: string;\n}\n\nexport default function UploadButton(props: Props) {\n    const dispatch = useDispatch();\n\n    const fileReader = new FileReader();\n    fileReader.onload = (event) => {\n        if (event.target === undefined) {\n            return;\n        }\n        if (event.target!.result === undefined) {\n            return;\n        }\n        const template: LoadTemplateFromFileDataActionPayload = JSON.parse(event.target!.result as string);\n\n        template.stopSymbols = template.stopSymbols.map(symbol => {\n            return symbol.split('\\n').join('\\\\n');\n        });\n        dispatch(loadTemplateFromFileData(template));\n    };\n\n    return <Files\n        className=\"files-dropzone\"\n        onChange={(file: any) => {\n            fileReader.readAsText(file[0]);\n        }}\n        onError={(err: any) => console.log(err)}\n        accepts={['.json']}\n        maxFileSize={10000000}\n        minFileSize={0}\n        clickable\n    >\n        <Button\n            variant=\"outlined\"\n            color=\"default\"\n            className={props.className}\n            size={'small'}\n            startIcon={<CloudUploadIcon />}\n        >\n            Upload\n        </Button>\n    </Files>;\n}","import React from 'react';\nimport { Grid, Button } from '@material-ui/core';\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks';\nimport WorkspaceSelector from \"./workspaceSelector/WorkspaceSelector\";\nimport {makeStyles} from \"@material-ui/styles\";\nimport {toggleTemplateDialog} from \"../slices/editorSlice\";\nimport {useDispatch} from \"react-redux\";\nimport DownloadButton from \"./fileExport/DownloadButton\";\nimport UploadButton from \"./fileExport/UploadButton\";\n\nconst useStyles = makeStyles({\n    fileExportButton: {\n        width: '125px',\n    },\n    templateButton: {\n        width: '100%',\n    },\n});\n\n\n\nexport default function WorkspaceForm () {\n    const styles = useStyles();\n    const dispatch = useDispatch();\n\n    const handleTemplateDialogOpen = () => {\n        dispatch(toggleTemplateDialog(true));\n    };\n\n    return <>\n        <Grid container direction={'column'} spacing={2}>\n            <Grid item><WorkspaceSelector/></Grid>\n            <Grid item>\n                <Grid container spacing={1}>\n                    <Grid item>\n                        <DownloadButton className={styles.fileExportButton} />\n                    </Grid>\n                    <Grid item>\n                        <UploadButton className={styles.fileExportButton} />\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid item>\n                <Button\n                    variant=\"contained\"\n                    className={styles.templateButton}\n                    startIcon={<LibraryBooksIcon />}\n                    onClick={handleTemplateDialogOpen}\n                >\n                    Explore templates\n                </Button>\n            </Grid>\n        </Grid>\n    </>;\n}","import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    Typography,\n    Slider,\n    TextField,\n    Grid,\n    Tooltip,\n    Card,\n    CardContent,\n    Select,\n    Box\n} from \"@material-ui/core\";\nimport ChipInput from 'material-ui-chip-input'\nimport {\n    selectPrompt,\n    editPrompt,\n    selectTemperature,\n    editTemperature,\n    selectMaxTokens,\n    editMaxTokens,\n    selectStopSymbols,\n    addStopSymbol,\n    deleteStopSymbol,\n    editTopP,\n    editFrequencyPenalty,\n    editPresencePenalty,\n    selectTopP,\n    selectFrequencyPenalty, selectPresencePenalty, selectModelName, editModelName\n} from \"../slices/editorSlice\";\nimport {makeStyles} from \"@material-ui/styles\";\nimport ModeTabs from \"./ModeTabs\";\nimport WorkspaceForm from \"./WorkspaceForm\";\n\nconst useStyles = makeStyles({\n    fullWidth: {\n        width: '100%',\n    },\n});\n\nexport function PromptEditor() {\n    const dispatch = useDispatch();\n    const styles = useStyles();\n\n    const prompt = useSelector(selectPrompt);\n    const temperature = useSelector(selectTemperature);\n    const topP = useSelector(selectTopP);\n    const frequencyPenalty = useSelector(selectFrequencyPenalty);\n    const presencePenalty = useSelector(selectPresencePenalty);\n    const maxTokens = useSelector(selectMaxTokens);\n    const stopSymbols = useSelector(selectStopSymbols);\n\n    const availableModelNames = ['davinci', 'davinci-beta',\n        'curie', 'curie-beta',\n        'babbage', 'babbage-beta',\n        'ada', 'ada-beta'];\n    const modelName = useSelector(selectModelName);\n\n    const handlePromptChange = (event: React.FormEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        dispatch(editPrompt(event.currentTarget.value));\n    }\n    const handleTemperatureChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n        dispatch(editTemperature(value as number));\n    }\n    const handleTopPChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n        dispatch(editTopP(value as number));\n    }\n    const handleFrequencyPenaltyChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n        dispatch(editFrequencyPenalty(value as number));\n    }\n    const handlePresencePenaltyChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n        dispatch(editPresencePenalty(value as number));\n    }\n    const handleMaxTokensChange = (event: React.ChangeEvent<{}>, value: number | number[]) => {\n        dispatch(editMaxTokens(value as number));\n    }\n    const handleModelNameChange = (event: any) => {\n        dispatch(editModelName(event.target.value));\n    }\n\n    return (\n        <div>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"flex-start\"\n                alignItems=\"flex-start\"\n                spacing={3}\n            >\n                <Grid item xs={12} sm={3} md={3}>\n                    {/*<Box mb={1}>\n                        <Card>\n                            <CardContent>\n                                <Box>\n                                    <Grid container>\n                                        <Grid item><Button\n                                            onClick={() => dispatch(ActionCreators.undo())}\n                                        >\n                                            Undo\n                                        </Button></Grid>\n                                        <Grid item>\n                                            <Button\n                                                aria-label=\"Undo last change\"\n                                                onClick={() => dispatch(ActionCreators.redo())}\n                                            >\n                                                Redo\n                                            </Button>\n                                        </Grid>\n                                        <Grid item>\n                                            <Button\n                                                aria-label=\"Save as a file\"\n                                                onClick={handleSaveAndDownload}\n                                            >\n                                                Save\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                </Box>\n                                <hr/>\n                                <Box mt={2}>\n                                    <Grid container>\n                                        <Grid item\n                                              className={styles.fullWidth}>\n                                            <TextField type=\"password\"\n                                                       variant=\"outlined\"\n                                                       label=\"API Key\"\n                                                       size={'small'}\n                                                       value={apiKey}\n                                                       onChange={(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n                                                           dispatch(editApiKey(event.currentTarget.value));\n                                                       }}\n                                                       inputProps={{\n                                                           autoComplete: 'new-password',\n                                                           form: {\n                                                               autoComplete: 'off',\n                                                           },\n                                                       }}\n                                                       className={styles.fullWidth}\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    </Box>*/}\n                    <Box mb={1}>\n                        <Card>\n                            <CardContent>\n                                <Typography gutterBottom>\n                                    <strong>Workspace</strong>\n                                </Typography>\n                                <WorkspaceForm/>\n                            </CardContent>\n                        </Card>\n                    </Box>\n                    <Card>\n                        <CardContent>\n                            <Typography gutterBottom>\n                                <strong>Parameters</strong>\n                            </Typography>\n                            <Tooltip title={'\"Controls randomness: Lowering results in less random completions. As the temperature approaches zero, the model will become deterministic and repetitive.\"'}\n                                     placement=\"left\">\n                                <Typography id=\"temperature-slider\" gutterBottom>\n                                    Temperature: <strong>{temperature}</strong>\n                                </Typography>\n                            </Tooltip>\n                            <Slider\n                                defaultValue={0.5}\n                                value={temperature}\n                                onChange={handleTemperatureChange}\n                                aria-labelledby=\"temperature-slider\"\n                                valueLabelDisplay=\"auto\"\n                                step={0.01}\n                                marks={[{\n                                    value: 0,\n                                    label: '0',\n                                }, {\n                                    value: 1,\n                                    label: '1',\n                                }]}\n                                min={0}\n                                max={1}\n                            />\n                            <Typography id=\"max-tokens-slider\" gutterBottom>\n                                Response length: <strong>{maxTokens}</strong>\n                            </Typography>\n                            <Slider\n                                defaultValue={10}\n                                aria-labelledby=\"max-tokens-slider\"\n                                valueLabelDisplay=\"auto\"\n                                value={maxTokens}\n                                onChange={handleMaxTokensChange}\n                                step={1}\n                                marks={[{\n                                    value: 1,\n                                    label: '1',\n                                }, {\n                                    value: 512,\n                                    label: '512',\n                                }]}\n                                min={1}\n                                max={512}\n                            />\n\n                            <Tooltip title=\"On which symbols GPT-3 should stop generating text. Enter \\n for a line break.\" placement=\"left\">\n                                <Typography gutterBottom>\n                                    Stop sequences:\n                                </Typography>\n                            </Tooltip>\n                            <ChipInput\n                                value={stopSymbols}\n                                onAdd={(chip) => dispatch(addStopSymbol(chip))}\n                                onDelete={(deletedChip) => dispatch(deleteStopSymbol(deletedChip))}\n                                onBeforeAdd={() => stopSymbols.length !== 4}\n                                newChipKeys={['Tab']}\n                                className={styles.fullWidth}\n                            />\n                        </CardContent>\n\n                        <CardContent>\n                            <Typography gutterBottom>\n                                <strong>Advanced parameters</strong>\n                            </Typography>\n                            <Tooltip title={'\"Controls diversity via nucleus sampling: 0.5 means half of all likelihood-weighted options are considered.\"'} placement=\"left\">\n                                <Typography id=\"top-p-slider\" gutterBottom>\n                                    Top P: <strong>{topP}</strong>\n                                </Typography>\n                            </Tooltip>\n                            <Slider\n                                defaultValue={0.5}\n                                value={topP}\n                                onChange={handleTopPChange}\n                                aria-labelledby=\"top-p-slider\"\n                                valueLabelDisplay=\"auto\"\n                                step={0.01}\n                                marks={[{\n                                    value: 0,\n                                    label: '0',\n                                }, {\n                                    value: 1,\n                                    label: '1',\n                                }]}\n                                min={0}\n                                max={1}\n                            />\n                            <Tooltip title={'\"How much to penalize new tokens based on their existing frequency in the text so far. Decreases the model\\'s likelihood to repeat the same line verbatim.\"'} placement=\"left\">\n                                <Typography id=\"frequency-penalty-slider\" gutterBottom>\n                                    Frequency Penalty: <strong>{frequencyPenalty}</strong>\n                                </Typography>\n                            </Tooltip>\n                            <Slider\n                                defaultValue={0.5}\n                                value={frequencyPenalty}\n                                onChange={handleFrequencyPenaltyChange}\n                                aria-labelledby=\"frequency-penalty-slider\"\n                                valueLabelDisplay=\"auto\"\n                                step={0.01}\n                                marks={[{\n                                    value: 0,\n                                    label: '0',\n                                }, {\n                                    value: 1,\n                                    label: '1',\n                                }]}\n                                min={0}\n                                max={1}\n                            />\n                            <Tooltip title={'\"How much to penalize new tokens based on whether they appear in the text so far. Increases the model\\'s likelihood to talk about new topics.\"'} placement=\"left\">\n                                <Typography id=\"presence-penalty-slider\" gutterBottom>\n                                    Presence Penalty: <strong>{presencePenalty}</strong>\n                                </Typography>\n                            </Tooltip>\n                            <Slider\n                                defaultValue={0.5}\n                                value={presencePenalty}\n                                onChange={handlePresencePenaltyChange}\n                                aria-labelledby=\"presence-penalty-slider\"\n                                valueLabelDisplay=\"auto\"\n                                step={0.01}\n                                marks={[{\n                                    value: 0,\n                                    label: '0',\n                                }, {\n                                    value: 1,\n                                    label: '1',\n                                }]}\n                                min={0}\n                                max={1}\n                            />\n                            <Typography id=\"model-name-typography\" gutterBottom>\n                                Model name:\n                            </Typography>\n                            <Select native id=\"model-name-select\" name=\"modelName\" value={modelName} onChange={handleModelNameChange} className={styles.fullWidth}>\n                                {availableModelNames.map((modelName, ind) => (\n                                    <option key={ind} value={modelName}>{modelName}</option>\n                                ))}\n                            </Select>\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item xs={12} sm={9} md={9}>\n                    <TextField\n                        id=\"prompt-text\"\n                        label=\"A prompt\"\n                        multiline\n                        rows={9}\n                        rowsMax={100}\n                        fullWidth={true}\n                        onChange={handlePromptChange}\n                        value={prompt}\n                        variant=\"outlined\"\n                    />\n                    <br/>\n                    <br/>\n                    <ModeTabs/>\n                </Grid>\n\n            </Grid>\n        </div>\n    );\n}","import {AppBar, Container, IconButton, Theme, Toolbar, Typography} from \"@material-ui/core\";\nimport VpnKeyIcon from \"@material-ui/icons/VpnKey\";\nimport UndoIcon from \"@material-ui/icons/Undo\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport React from \"react\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    selectApiKey,\n    toggleApiKeyDialog,\n} from \"../slices/editorSlice\";\nimport {ActionCreators} from \"redux-undo\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    buttonGroup: {\n        marginRight: theme.spacing(2),\n    },\n    apiKeyInput: {\n        minWidth: '400px',\n    },\n}));\n\nexport default function Header() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    const apiKey = useSelector(selectApiKey);\n    const apiKeyPresent = !!apiKey;\n    const handleApiKeyDialogOpen = () => {\n        dispatch(toggleApiKeyDialog(true));\n    };\n    const handleUndoClick = () => {\n        dispatch(ActionCreators.undo());\n    };\n    const handleRedoClick = () => {\n        dispatch(ActionCreators.redo());\n    };\n\n    return <AppBar position=\"static\">\n        <Container maxWidth={\"lg\"}>\n            <Toolbar variant=\"regular\" disableGutters={true}>\n                <div className={classes.buttonGroup}>\n                    <Typography variant=\"h6\" color=\"inherit\">\n                        Prompts.ai\n                    </Typography>\n                </div>\n                <div className={classes.buttonGroup}>\n                    <IconButton onClick={handleApiKeyDialogOpen}><VpnKeyIcon color={apiKeyPresent ? \"action\" : \"error\"}/></IconButton>\n                </div>\n                <div className={classes.buttonGroup}>\n                    <IconButton onClick={handleUndoClick}><UndoIcon/></IconButton>\n                    <IconButton onClick={handleRedoClick}><RedoIcon/></IconButton>\n                </div>\n                <div className={classes.buttonGroup}>\n                    <IconButton aria-label=\"GitHib\" onClick={() => window.open('https://github.com/sevazhidkov/prompts-ai', '_blank')}>\n                        <GitHubIcon fontSize={'small'}/>\n                    </IconButton>\n                </div>\n            </Toolbar>\n        </Container>\n    </AppBar>\n}","import {uniqueId} from \"lodash\";\nimport {LoadTemplateActionPayload, TabIndex} from '../slices/editorSlice';\n\nexport interface Template {\n    id: string;\n    name: string;\n    actionPayload: LoadTemplateActionPayload;\n}\n\ninterface TemplateGroup {\n    name: string;\n    templates: Array<Template>;\n}\n\nconst templateGroups = [\n    {name: 'Simple', templates: [\n            {\n                id: uniqueId('template_'),\n                name: 'Top 10 Women',\n                actionPayload: {\n                    prompt: 'Top 10 most important women in human history, and their greatest achievements:\\n' +\n                        '\\n' +\n                        '1.',\n                    stopSymbols: ['11.'],\n                    tabIndex: TabIndex.basic,\n                    examples: []\n                }\n            },\n            {\n                id: uniqueId('template_'),\n                name: 'Email Generation',\n                actionPayload: {\n                    prompt: 'The following email explains two things:\\n' +\n                        '1) The writer, Andy, is going to miss work.\\n' +\n                        '2) The receiver, Betty, is Andy\\'s boss and can email if anything needs to be done.\\n' +\n                        '\\n' +\n                        'From: ',\n                    stopSymbols: [],\n                    tabIndex: TabIndex.basic,\n                    examples: []\n                },\n            },\n            {\n                id: uniqueId('template_'),\n                name: 'Federalist Paper (Memory)',\n                actionPayload: {\n                    prompt: 'FEDERALIST No. 79. The Judiciary Continued\\n' +\n                        '\\n' +\n                        'HAMILTON\\n' +\n                        '\\n' +\n                        'To the People of the State of New York.\\n' +\n                        '\\n' +\n                        'IN THE course of the preceding papers,',\n                    stopSymbols: [],\n                    tabIndex: TabIndex.basic,\n                    examples: []\n                },\n            },\n            {\n                id: uniqueId('template_'),\n                name: 'Simple Math',\n                actionPayload: {\n                    prompt: '2 * 4 =',\n                    stopSymbols: ['\\\\n'],\n                    tabIndex: TabIndex.basic,\n                    examples: []\n                },\n            }\n        ]},\n    {name: 'Examples', templates: [\n            {id: uniqueId('template_'), name: 'Company Classification', actionPayload: {\n                    prompt: 'The following is a list of companies and the categories they fall into\\n' +\n                        '\\n' +\n                        'Facebook: Social media, Technology\\n' +\n                        'Uber: Transportation, Technology, Marketplace\\n' +\n                        'Mcdonalds: Food, Fast Food, Logistics, Restaurants\\n' +\n                        '{example}:',\n                    tabIndex: TabIndex.multipleExamples,\n                    stopSymbols: ['\\\\n'],\n                    examples: [{text: 'Unilever', output: 'Consumer Goods, Food, Personal Care, Retail'}, {text: 'LinkedIn', output: 'Social Media, Technology, Business'}, {text: 'FedEx', output: 'Logistics, Transportation'}]\n                }},\n            {id: uniqueId('template_'), name: 'Alliteration Generator', actionPayload: {\n                prompt: 'Find synonyms for words that can create alliterations.\\n' +\n                    '\\n' +\n                    'Sentence: The dog went to the store.\\n' +\n                    'Alliteration: The dog drove to the department.\\n' +\n                    '\\n' +\n                    'Sentence: David wears a hat everyday.\\n' +\n                    'Alliteration: David dons a derby daily.\\n' +\n                    '\\n' +\n                    'Sentence: The soap dries over night.\\n' +\n                    'Alliteration: The soap shrivels succeeding sunset.\\n' +\n                    '\\n' +\n                    'Sentence: {example}\\n' +\n                    'Alliteration:',\n                examples: [{text: 'A person was running to the church.', output: ''},\n                     {text: 'A person cooked a great meal.', output: ''}],\n                tabIndex: 0,\n                stopSymbols: ['\\\\n'],\n                }},\n            {id: uniqueId('template_'), name: 'Song Generation', actionPayload: {\n                    stopSymbols: [\"\\\\n\\\\n\"],\n                    prompt: 'VERSE:\\n' +\n                        'Alas my love,\\n' +\n                        'You do me wrong,\\n' +\n                        'To cast me off discourteously,\\n' +\n                        'for i have loved you so long,\\n' +\n                        'delighting in your company.\\n' +\n                        '\\n' +\n                        'CHORDS:\\n' +\n                        'Alas[Am] my[C] love,\\n' +\n                        'you [G]do [Em]me wrong,\\n' +\n                        'to [Am]cast me off dis[E]courteously,\\n' +\n                        'for [Am]i have[C] loved[G] you [Em]so long,\\n' +\n                        'de[Am]lighting in[E7] your [Am]company.\\n' +\n                        '\\n' +\n                        'VERSE:\\n' +\n                        '{example}\\n' +\n                        '\\n' +\n                        'CHORDS:',\n                    examples: [\n                        {text: 'My pangolin heart\\n' +\n                            'has scales of bone\\n' +\n                            'black and streaked with red\\n' +\n                            'hidden like a forgotten gem\\n' +\n                            'in the dusk', output: ''},\n                        {text: 'Country roads, take me home\\n' +\n                                'To the place I belong\\n' +\n                                'West Virginia, mountain mama\\n' +\n                                'Take me home, country roads',\n                        output: ''}\n                    ],\n                    tabIndex: TabIndex.multipleExamples,\n                }},\n            {id: uniqueId('template_'), name: 'Sentence => Email', actionPayload: {\n                    prompt: '```\\n' +\n                        'Thank John for the book. \\n' +\n                        '\\n' +\n                        '````\\n' +\n                        '\\n' +\n                        'Dear John,\\n' +\n                        '\\n' +\n                        'Thank you so much for the book. I really appreciate it. \\n' +\n                        '\\n' +\n                        'I hope to hang out soon. \\n' +\n                        '\\n' +\n                        'Your friend, \\n' +\n                        '\\n' +\n                        'Sarah\\n' +\n                        '\\n' +\n                        '###\\n' +\n                        '\\n' +\n                        'Tell TechCorp I appreciate the great service.\\n' +\n                        '\\n' +\n                        '````\\n' +\n                        '\\n' +\n                        'To Whom it May Concern, \\n' +\n                        '\\n' +\n                        'I want you to know that I appreciate the great service at TechCorp.\\n' +\n                        '\\n' +\n                        'The staff is outstanding and I enjoy every visit. \\n' +\n                        '\\n' +\n                        'Sincerely, \\n' +\n                        '\\n' +\n                        'Bill Johnson\\n' +\n                        '\\n' +\n                        '###\\n' +\n                        '\\n' +\n                        'Invoice Kelly Watkins $500 for design consultation.\\n' +\n                        '\\n' +\n                        '````\\n' +\n                        '\\n' +\n                        'Dear Ms. Watkins, \\n' +\n                        '\\n' +\n                        'This is my invoice for $500 for design consultation. \\n' +\n                        '\\n' +\n                        'It was a pleasure to work with you. \\n' +\n                        '\\n' +\n                        'Sincerely, \\n' +\n                        '\\n' +\n                        'Emily Fields\\n' +\n                        '\\n' +\n                        '###\\n' +\n                        '\\n' +\n                        'Invite Amanda and Paul to the company event Friday night. \\n' +\n                        '\\n' +\n                        '```\\n' +\n                        'Dear Amanda and Paul,\\n' +\n                        '\\n' +\n                        'I hope this finds you doing well. \\n' +\n                        '\\n' +\n                        'I want to invite you to our company event on Friday night. \\n' +\n                        '\\n' +\n                        'It will be a great opportunity for networking and there will be food and drinks. \\n' +\n                        '\\n' +\n                        'Should be fun. \\n' +\n                        '\\n' +\n                        'Best, \\n' +\n                        '\\n' +\n                        'Ryan\\n' +\n                        '\\n' +\n                        '###\\n' +\n                        '\\n' +\n                        '{example}\\n' +\n                        '\\n' +\n                        '```\\n',\n                    stopSymbols: ['###'],\n                    examples: [\n                        {'text': 'Ask RAM Co. if they have new storage units in stock.', 'output': ''}\n                    ],\n                    tabIndex: TabIndex.multipleExamples\n                }},\n            {id: uniqueId('template_'), name: 'Book Review', actionPayload: {\n                    prompt: 'Title: Lovely War\\n' +\n                        'Rating: 3/5\\n' +\n                        'Quotes:\\n' +\n                        '- \"It was time for James and Hazel to get properly acquainted. Time to see if the magic of music and moonlight and graceful movement were all that they had shared, or if a grimy gray London dawn and a cheap cup of coffee could make them feel the same way.\"\\n' +\n                        '- \"Annihilation has its own je ne sais quoi. We’re all guilty of it. So spare me the sermons.\"\\n' +\n                        '- \"His mother’s letters are full of urgent warning. She grew up in Mississippi. \\n' +\n                        'She knows about lynching. Aubrey wonders if he’ll die in his country before he \\n' +\n                        'ever gets the chance to die for his country. Either way, he’d rather not.\"\\n' +\n                        '- \"Whatever boost sixty captured miles might have brought to German morale was \\n' +\n                        'erased by the chocolate in the BEF’s packs. War is morale. War is supply. War is \\n' +\n                        'chocolate.\"\\n' +\n                        'Thoughts:\\n' +\n                        '- Pacing felt awkward\\n' +\n                        '- WW1 history felt accurate\\n' +\n                        '- Didn\\'t care too much for the story of the Gods\\n' +\n                        'Review: A good book with well rounded characters, but the pacing felt super \\n' +\n                        'awkward. The titles of the chapters showed which Greek God was speaking, but I was more interested in the WW1 tales than their relationships.\\n' +\n                        '\\n' +\n                        '\\'\\'\\'\\n' +\n                        '{example}\\n' +\n                        'Review:',\n                    examples: [\n                        {text: 'Title: Goodbye, Things\\n' +\n                                'Rating: 4/5\\n' +\n                                'Thoughts:\\n' +\n                                '- very cleanly written\\n' +\n                                '- read easily\\n' +\n                                '- author did good research', output: ''},\n                        {text: 'Title: Deep Work: Rules for Focused Success in a Distracted World\\n' +\n                                'Rating: 5/5\\n' +\n                                'Thoughts:\\n' +\n                                '- Great read, got me to refocus my goals around my schedule.\\n' +\n                                '- Got me to delete a social media I used too much\\n' +\n                                '- I like that Cal Newport is a computer scientist as well', output: ''}\n                    ],\n                    tabIndex: TabIndex.multipleExamples,\n                    stopSymbols: ['\\\\n\\\\n']\n                }},\n            {id: uniqueId('template_'), name: 'Headline Generation', actionPayload: {\n                    prompt: 'Topic: Britain, coronavirus, beaches\\n' +\n                        'Headline: Videos show crowded beaches in Britain\\n' +\n                        '\\n' +\n                        'Topic: Apple, Big Sur, software\\n' +\n                        'Headline: Apple promises faster software update installation with macOS Big Sur\\n' +\n                        '\\n' +\n                        'Topic: Artic, climate change, satellite\\n' +\n                        'Headline: A Satellite Lets Scientists See Antarctica’s Melting Like Never Before\\n' +\n                        '\\n' +\n                        'Topic: {example}\\n' +\n                        'Headline:',\n                    examples: [\n                        {text: 'Chicago, restaurants, summer', output: ''}\n                    ],\n                    tabIndex: TabIndex.multipleExamples,\n                    stopSymbols: ['\\\\n']\n                }},\n            {id: uniqueId('template_'), name: 'Product Name Generator', actionPayload: {\n                    prompt: 'This is a product name generator. It takes a product\\'s description and seed words, then outputs a list of potential product names.\\n' +\n                        '\\n' +\n                        'Product description: A complete home gym that can fit in any apartment.\\n' +\n                        'Seed words: intelligent, aspirational, luxury, futuristic\\n' +\n                        'Product names: InfinityHome, Quantum, FlexFit, Flight, FutureFit\\n' +\n                        '\\n' +\n                        'Product description: An affordable electric bike.\\n' +\n                        'Seed words: Easy, eco-friendly, practical, dependable\\n' +\n                        'Product names: Pegasus, Swifty, SunRunner, Wave, Amp\\n' +\n                        '\\n' +\n                        '{example}\\n' +\n                        'Product names:',\n                    examples: [\n                        {text: 'Product description: A zero carbohydrate cereal that tastes great.\\n' +\n                                'Seed words: fitness, healthy, keto, clean, tasty', output: ''}\n                    ],\n                    tabIndex: TabIndex.multipleExamples,\n                    stopSymbols: ['\\\\n']\n                }},\n            {id: uniqueId('template_'), name: 'Rhyming', actionPayload: {\n                    prompt: 'A homophone is defined as a word that is pronounced the same as another word but \\n' +\n                        'differs in meaning.\\n' +\n                        '\\n' +\n                        'Here is a list of homophones:\\n' +\n                        '1. Accept/Except\\n' +\n                        '2. Affect/Effect\\n' +\n                        '3. Allude/Elude\\n' +\n                        '4. Alter/Altar\\n' +\n                        '5. A lot/Allot\\n' +\n                        '\\n' +\n                        'Here\\'s a list of homophones starting with the letter \"{example}\":\\n',\n                    examples: [\n                        {text: \"b\", output: \"\"}\n                    ],\n                    stopSymbols: [],\n                    tabIndex: TabIndex.multipleExamples\n                }},\n            {id: uniqueId('template_'), name: 'Q&A', actionPayload: {\n                    prompt: \"Q: What is the definition of a linearly independent list?\\n\" +\n                        \"A: A linearly independent list is a list of vectors that cannot be\\n\" +\n                        \" expressed as a linear combination of other vectors in the list.\\n\" +\n                        \" \\n\" +\n                        \"Q: What is a basis of a vector space?\\n\" +\n                        \"A: A basis of a vector space is a linearly independent list of vectors\\n\" +\n                        \" that spans the vector space.\\n\" +\n                        \"\\n\" +\n                        \"Q: What is a spanning list of vectors in a vector space?\\n\" +\n                        \"A: A spanning list of vectors in a vector space is list of vectors in\\n\" +\n                        \" the vector space such that every vector in the vector space can be\\n\" +\n                        \" written as a linear combination of the vectors in the spanning list.\\n\" +\n                        \" \\n\" +\n                        \"Q: {example}\\n\" +\n                        \"A:\",\n                    examples: [\n                        {text: \"What is an eigenvector of a linear transformation f?\", output: \"\"},\n                        {text: \"What is the definition of a linear transformation?\", output: \"\"},\n                        {text: \"Is the vector space of univariate polynomials over a finite field a finite-dimensional vector space?\",\n                            output: \"\"},\n                        {text: \"What is the maximum number of eigenvalues of an operator on a 5-dimensional vector space?\", output: \"\"},\n                        {text: \"Can the length of a spanning list for a vector space be longer than any linearly independent list of vectors in that space?\",\n                            output: \"\"},\n\n                    ],\n                    stopSymbols: [\"\\\\n\"],\n                    tabIndex: TabIndex.multipleExamples\n                }},\n            {id: uniqueId('template_'), name: 'Summarization', actionPayload: {\n                    prompt: '```\\n' +\n                        'My second grader asked me what this passage means:\\n' +\n                        '\\n' +\n                        '\"\"\"\\n' +\n                        '\\n' +\n                        '{example}\\n' +\n                        '\\n' +\n                        '\"\"\"\\n' +\n                        '\\n' +\n                        'I rephrased it for him, in plain language a second grader can understand:\\n' +\n                        '\\n' +\n                        '\"\"\"\\n',\n                    examples: [\n                        {text: \"Overnight trading for the NYSE Index futures was a bit volatile, \" +\n                                \"dropping by about 3% to the downside before moving sharply back to the upside. \" +\n                                \"Gold futures were unchanged and the E-mini NASDAQ 100 futures remained near \" +\n                                \"unchanged. The yield on the 10-year Treasury bond finished unchanged from its \" +\n                                \"close of 2.45% earlier today.\",\n                            output: \"\"},\n                        {text: \"This Nondisclosure Agreement (the \\\"Agreement\\\") is entered into by and between _______________ with its principal offices at _______________, (\\\"Disclosing Party\\\") and _______________, located at _______________ (\\\"Receiving Party\\\") for the purpose of preventing the unauthorized disclosure of Confidential Information as defined below. The parties agree to enter into a confidential relationship concerning the disclosure of certain proprietary and confidential information (\\\"Confidential Information\\\"). 1. Definition of Confidential Information. For purposes of this Agreement, \\\"Confidential Information\\\" shall include all information or material that has or could have commercial value or other utility in the business in which Disclosing Party is engaged. If Confidential Information is in written form, the Disclosing Party shall label or stamp the materials with the word \\\"Confidential\\\" or some similar warning. If Confidential Information is transmitted orally, the Disclosing Party shall promptly provide writing indicating that such oral communication constituted Confidential Information. 2. Exclusions from Confidential Information. Receiving Party's obligations under this Agreement do not extend to information that is: (a) publicly known at the time of disclosure or subsequently becomes publicly known through no fault of the Receiving Party; (b) discovered or created by the Receiving Party before disclosure by Disclosing Party; (c) learned by the Receiving Party through legitimate means other than from the Disclosing Party or Disclosing Party's representatives; or (d) is disclosed by Receiving Party with Disclosing Party's prior written approval.\",\n                            output: \"\"},\n                    ],\n                    stopSymbols: ['\"\"\"'],\n                    tabIndex: TabIndex.multipleExamples\n                }},\n            {id: uniqueId('template_'), name: 'Code Translation', actionPayload: {\n                    prompt: 'Python:\\n' +\n                        'list[::-1]\\n' +\n                        'Ruby:\\n' +\n                        'list.reverse\\n' +\n                        '\\n' +\n                        'Python:\\n' +\n                        'list[1:4]\\n' +\n                        'Ruby:\\n' +\n                        'list[1..4]\\n' +\n                        '\\n' +\n                        'Python:\\n' +\n                        'print(\"Hello World\")\\n' +\n                        'Ruby:\\n' +\n                        'puts \"Hello World\"\\n' +\n                        '\\n' +\n                        'Python:\\n' +\n                        'fruits = [\"apple\",\"banana\",\"cherry\"]\\n' +\n                        'for x in fruits:\\n' +\n                        'print(x)\\n' +\n                        'Ruby:\\n' +\n                        'fruit = [\"apple\", \"banana\", \"cherry\"]\\n' +\n                        'each {|x| print x } \\n' +\n                        '\\n' +\n                        'Python:\\n' +\n                        '{example}\\n' +\n                        'Ruby:\\n',\n                    examples: [\n                        {text: 'fruits = [\"apple\",\"banana\",\"cherry\"]\\n' +\n                                'a = list(fruits)\\n' +\n                                'print(a)\\n' +\n                                'a.reverse()\\n' +\n                                'print(a)', output: \"\"}\n                    ],\n                    stopSymbols: [\"Python:\"],\n                    tabIndex: TabIndex.multipleExamples\n                }},\n            {id: uniqueId('template_'), name: 'Translation', actionPayload: {\n                    prompt: 'English: I do not speak French.\\n' +\n                        'French: Je ne parle pas français.\\n' +\n                        '\\n' +\n                        'English: See you later!\\n' +\n                        'French: À tout à l\\'heure!\\n' +\n                        '\\n' +\n                        'English: Where is a good restaurant?\\n' +\n                        'French: Où est un bon restaurant?\\n' +\n                        '\\n' +\n                        'English: {example}\\n' +\n                        'French:',\n                    examples: [\n                        {text: \"What rooms do you have available?\", output: \"\"}\n                    ],\n                    stopSymbols: ['\\\\n'],\n                    tabIndex: TabIndex.multipleExamples\n                }},\n            {id: uniqueId('template_'), name: 'Estimation', actionPayload: {\n                    prompt: 'Lower and upper bound for each quantity:\\n' +\n                        '\\tNumber of cars in New York: 1500000 to 2500000\\n' +\n                        '\\tNumber of cars in San Francicso: 300000 to 600000\\n' +\n                        '\\tHeight of Empire State building: 1400 to 1500 feet\\n' +\n                        '\\tLength of average car: 4 to 4.5 meters\\n' +\n                        '\\tPopulation of Germany: 80 to 85 million\\n' +\n                        '\\t{example}:',\n                    examples: [\n                        {text: \"How much does the iPhone XI cost?\", output: \"\"}\n                    ],\n                    stopSymbols: ['\\\\n'],\n                    tabIndex: TabIndex.multipleExamples\n                }},\n        ]\n    },\n    {name: 'Variations', templates: [\n            {id: uniqueId('template_'), name: 'React Components', actionPayload: {\n                prompt: 'import React from \\'react\\';\\n' +\n                    '\\n' +\n                    'const ThreeButtonComponent=()=>(',\n                examples: [], tabIndex: TabIndex.variations\n                }},\n            {id: uniqueId('template_'), name: 'Analogies Generator', actionPayload: {\n                    prompt: 'Neural networks are like',\n                    stopSymbols: ['.'],\n                    examples: [], tabIndex: TabIndex.variations\n                }},\n            {id: uniqueId('template_'), name: 'Idea Generator', actionPayload: {\n                    prompt: 'Here is a list of 100 interesting ideas for new movie plots. Each plot is ' +\n                        'described with a title and a summary paragraph:\\n' +\n                        '\\n' +\n                        '1. The Bird. \\n' +\n                        'A woman realizes that her pet bird is actually highly intelligent and able to communicate. The bird turns out to be a secret agent working for the CIA. The woman has to keep the bird\\'s secret.\\n' +\n                        '\\n' +\n                        '2.',\n                    stopSymbols: ['3'],\n                    examples: [], tabIndex: TabIndex.variations\n                }},\n            {id: uniqueId('template_'), name: 'Tweet Generation', actionPayload: {\n                prompt: 'My favorite programming tweets:\\n' +\n                    '-------\\n' +\n                    'I asked @ilyasut how to set neural network init. He accidentally replied with a poem:\\n' +\n                    'You want to be on the edge of chaos\\n' +\n                    'Too small, and the init will be too stable, with vanishing gradients\\n' +\n                    'Too large, and you\\'ll be unstable, due to exploding gradients\\n' +\n                    'You want to be on the edge\\n' +\n                    '-------\\n' +\n                    'I\\'ve been programming for 10 years now. Still feels like magic out of a fantasy: say the words exactly right, and watch your intent get carried out; say the words slightly wrong, and things go haywire. Feeling of wonder and joy hasn\\'t faded one bit.\\n' +\n                    '-------\\n' +\n                    'Web programming is the science of coming up with increasingly complicated ways of concatenating strings.\\n' +\n                    '-------\\n' +\n                    'If you ever feel alone in this world, read your firewall logs. Problem solved :)\\n' +\n                    '-------\\n' +\n                    'Always wanted to travel back in time to try fighting a younger version of yourself? Software development is the career for you!\\n' +\n                    '-------\\n' +\n                    'After 17 years as a professional developer, it seems that the answer to every programming question is \"it depends\"\\n' +\n                    '-------\\n',\n                    stopSymbols: ['\\\\n-'], examples: [], tabIndex: TabIndex.variations\n                }},\n            {id: uniqueId('template_'), name: 'Poem Generator', actionPayload: {\n                    prompt: 'Who trusted God was love indeed\\n' +\n                        'And love Creation’s final law\\n' +\n                        'Tho’ Nature, red in tooth and claw\\n' +\n                        'With ravine, shriek’d against his creed.\\n' +\n                        'The hills are shadows, and they flow\\n' +\n                        'From form to form, and nothing stands;T\\n' +\n                        'hey melt like mist, the solid lands,\\n' +\n                        'Like clouds they shape themselves and go.\\n' +\n                        '----\\n',\n                    stopSymbols: ['--'], examples: [], tabIndex: TabIndex.variations\n                }},\n        ]},\n    {\n        name: 'Conversations',\n        templates: [\n            {id: uniqueId('template_'), name: 'Mark Zuckerberg', actionPayload: {\n                    prompt: 'The following is a transcript of a conversation between Steve, a computer science student, ' +\n                    'and Mark Zuckerberg. Mark Zuckerberg is an American media magnate, internet entrepreneur, and philanthropist. ' +\n                    'He is known for co-founding Facebook, Inc. and serves as its chairman, chief executive officer,' +\n                    ' and controlling shareholder.\\n',\n                    stopSymbols: ['\\\\n'],\n                    examples: [],\n                    tabIndex: TabIndex.conversations,\n                    startSequence: '\\nMark:',\n                    restartSequence: '\\nSteve: ',\n                }},\n            {id: uniqueId('template_'), name: 'AI Assistant', actionPayload: {\n                    prompt: 'The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\\n',\n                    stopSymbols: ['\\\\n'],\n                    examples: [],\n                    tabIndex: TabIndex.conversations,\n                    startSequence: '\\nAI:',\n                    restartSequence: '\\nHuman: ',\n                }}\n        ]\n    }\n];\n\nexport default function getTemplateGroups() : Array<TemplateGroup> {\n    return templateGroups;\n}\n\nexport function getFlattenedTemplates() {\n    return ([] as Template[]).concat(...getTemplateGroups().map((templateGroup) => templateGroup.templates));\n}\n","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    List,\n    ListItem,\n    ListItemText,\n    ListSubheader,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    cleanExampleList,\n    loadTemplate,\n    selectTemplateDialogVisible,\n    toggleTemplateDialog\n} from \"../../slices/editorSlice\";\nimport getTemplateGroups, {Template} from \"../../libs/templatesLibrary\";\nimport {makeStyles, Theme} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    templateDialog: {\n        minWidth: '50vw',\n    },\n    templateGroupHeader: {\n        backgroundColor: theme.palette.background.paper,\n    }\n}));\n\nexport default function TemplateDialog() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n\n    const templateDialogOpen = useSelector(selectTemplateDialogVisible);\n    const handleTemplateDialogClose = () => {\n        dispatch(toggleTemplateDialog(false));\n    };\n\n    const templateGroups = getTemplateGroups();\n    const handleLoadTemplate = (template: Template) => () => {\n        dispatch(loadTemplate(template.actionPayload))\n        dispatch(cleanExampleList());\n        handleTemplateDialogClose();\n    };\n\n    return <Dialog\n        open={templateDialogOpen}\n        onClose={handleTemplateDialogClose}\n        aria-labelledby=\"template-dialog-title\"\n    >\n        <DialogTitle id=\"template-dialog-title\">Load Template</DialogTitle>\n        <DialogContent\n            className={classes.templateDialog}\n        >\n            {templateGroups.map((templateGroup, ind) => (\n                <div key={ind}>\n                    <List subheader={<ListSubheader className={classes.templateGroupHeader}>{templateGroup.name}</ListSubheader>}>\n                        {templateGroup.templates.map(template => (\n                            <ListItem key={template.id} button\n                                      onClick={handleLoadTemplate(template)}><ListItemText>{template.name}</ListItemText></ListItem>\n                        ))}\n                    </List>\n                </div>\n            ))}\n\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={handleTemplateDialogClose} color=\"primary\">\n                Close\n            </Button>\n        </DialogActions>\n    </Dialog>;\n}","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    TextField,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport {editApiKey, selectApiKey, selectApiKeyDialogVisible, toggleApiKeyDialog} from \"../../slices/editorSlice\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n    apiKeyInput: {\n        minWidth: '400px',\n    },\n});\n\nexport default function ApiKeyDialog() {\n    const dispatch = useDispatch();\n\n    const apiKey = useSelector(selectApiKey);\n    const apiKeyDialogOpen = useSelector(selectApiKeyDialogVisible);\n    const handleApiKeyDialogClose = () => {\n        dispatch(toggleApiKeyDialog(false));\n    };\n\n    const classes = useStyles();\n\n    return <Dialog open={apiKeyDialogOpen} onClose={handleApiKeyDialogClose} aria-labelledby=\"api-key-form-dialog-title\">\n        <DialogTitle id=\"api-key-form-dialog-title\">API Key</DialogTitle>\n        <DialogContent>\n            <DialogContentText>\n                Please provide your OpenAI API Key. We only store this key locally and never send it to our servers.\n            </DialogContentText>\n            <TextField\n                className={classes.apiKeyInput}\n                autoFocus\n                margin=\"dense\"\n                id=\"name\"\n                label=\"API Key\"\n                type=\"text\"\n                value={apiKey}\n                fullWidth\n                onChange={(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n                    dispatch(editApiKey(event.currentTarget.value));\n                }}\n            />\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={handleApiKeyDialogClose} color=\"primary\">\n                Done\n            </Button>\n        </DialogActions>\n    </Dialog>;\n}","import React, {useEffect} from 'react';\nimport {PromptEditor} from './components/PromptEditor';\nimport {Box, Container, createMuiTheme, CssBaseline, ThemeProvider, Typography,} from \"@material-ui/core\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\nimport {useDispatch} from \"react-redux\";\nimport {fetchForCurrentTab, updateTabIndex, normalizeConversations} from \"./slices/editorSlice\";\nimport Header from \"./components/Header\";\nimport TemplateDialog from \"./components/dialogs/TemplateDialog\";\nimport ApiKeyDialog from \"./components/dialogs/ApiKeyDialog\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    const theme = createMuiTheme({\n        palette: {\n            type: \"dark\"\n        }\n    });\n\n    useEffect(() => {\n        dispatch(normalizeConversations());\n    });\n\n    useHotkeys('ctrl+enter,cmd+enter', () => {\n        dispatch(fetchForCurrentTab());\n    }, {filter: () => true});\n    useHotkeys('ctrl+1', () => {\n        dispatch(updateTabIndex(0));\n    });\n    useHotkeys('ctrl+2', () => {\n        dispatch(updateTabIndex(1));\n    });\n    useHotkeys('ctrl+3', () => {\n        dispatch(updateTabIndex(2));\n    });\n    useHotkeys('ctrl+4', () => {\n        dispatch(updateTabIndex(3));\n    });\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline/>\n\n            <ApiKeyDialog/>\n            <TemplateDialog/>\n\n            <Header/>\n\n            <Container maxWidth={\"lg\"}>\n                <Box mt={2}>\n                    <PromptEditor/>\n                </Box>\n                {/*<Box mt={2}>\n                    <ModeTabs/>\n                </Box>*/}\n                <Box mt={2}>\n                    <Typography>\n                        Not affiliated with OpenAI. Feedback: seva@zhidkoff.com.</Typography>\n                </Box>\n            </Container>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import uniqid from \"uniqid\";\n\nexport const migrations = {\n    0: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                maxCreativeCompletions: 10,\n                creativeCompletions: []\n            }\n        };\n    },\n    1: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                showPromptForCreativeCompletions: true,\n            }\n        };\n    },\n    2: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                tabIndex: 0\n            }\n        };\n    },\n    3: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                stopSymbols: []\n            }\n        };\n    },\n    4: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                topP: 1,\n                frequencyPenalty: 0,\n                presencePenalty: 0,\n            }\n        };\n    },\n    5: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                creativeCompletions: state.creativeCompletions.map((completion: any) => ({\n                    ...completion,\n                    topP: 1,\n                    frequencyPenalty: 0,\n                    presencePenalty: 0,\n                }))\n            }\n        };\n    },\n    6: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                showExamplePreviousOutputs: false\n            }\n        };\n    },\n    7: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                past: [],\n                future: [],\n                present: {...state.editor}\n            }\n        };\n    },\n    8: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                present: {\n                    ...state.editor.present,\n                    modelName: 'davinci'\n                }\n            }\n        }\n    },\n    9: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                present: {\n                    ...state.editor.present,\n                    conversations: []\n                }\n            }\n        }\n    },\n\n    10: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                present: {\n                    ...state.editor.present,\n                    loadingVariations: state.editor.present.loadingCreativeCompletions,\n                    variations: state.editor.present.creativeCompletions,\n                    maxVariations: state.editor.present.maxCreativeCompletions,\n                    showPromptForVariations: state.editor.present.showPromptForCreativeCompletions\n                }\n            }\n        }\n    },\n\n    12: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                present: {\n                    ...state.editor.present,\n                    currentWorkspaceId: 'first_workspace',\n                    workspaces: [{\n                        id: 'first_workspace',\n                        prompt: \"Input: Anna and Mike is going skiing.\\n\" +\n                            \"Output: Anna and Mike are going skiing.\\n\" +\n                            \"Input: Anna and Pat are married; he has been together for 20 years.\\n\" +\n                            \"Output: Anna and Pat are married; they have been together for 20 years.\\n\" +\n                            \"Input: I walk to the store and I bought milk.\\n\" +\n                            \"Output: I walked to the store and I bought milk.\\n\" +\n                            \"Input: {example}\\n\" +\n                            \"Output:\",\n                        modelName: 'davinci',\n                        temperature: 0.5,\n                        topP: 1,\n                        frequencyPenalty: 0,\n                        presencePenalty: 0,\n                        stopSymbols: [\"\\\\n\"],\n                        maxTokens: 30,\n                        tabIndex: 0,\n\n                        showExamplePreviousOutputs: false,\n                        examples: [\n                            {id: uniqid(\"input_\"), text: \"We all eat the fish and then made dessert.\", output: \"We all ate the fish and then made dessert.\", isLoading: false},\n                            {id: uniqid(\"input_\"), text: \"I like ski every day.\", output: \"I like skiing every day.\", isLoading: false},\n                        ],\n\n                        loadingVariations: false,\n                        variations: [],\n                        maxVariations: 10,\n                        showPromptForVariations: true,\n\n                        conversations: [],\n                    }],\n                }\n            }\n        }\n    },\n\n    13: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                present: {\n                    ...state.editor.present,\n                    workspaces: state.editor.present.workspaces.map((workspace: any) => ({\n                        ...workspace,\n                        name: 'Draft #1'\n                    })),\n                }\n            }\n        }\n    },\n\n    14: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                present: {\n                    ...state.editor.present,\n                    workspaces: state.editor.present.workspaces.map((workspace: any) => ({\n                        ...workspace,\n                        basic: {\n                            output: '',\n                            loading: false,\n                        }\n                    })),\n                }\n            }\n        }\n    },\n\n    15: (state: any) => {\n        return {\n            ...state,\n            editor: {\n                ...state.editor,\n                present: {\n                    ...state.editor.present,\n                    editableWorkspaceName: state.editor.present.workspaces.find((w: any) => w.id === state.editor.present.currentWorkspaceId).name\n                }\n            }\n        }\n    },\n};\n\nexport const currentVersion = 15;\n","import { configureStore, ThunkAction, Action, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer, createMigrate } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\nimport { PERSIST, PURGE, REHYDRATE } from 'redux-persist/es/constants';\nimport { createStateSyncMiddleware, initMessageListener } from 'redux-state-sync';\nimport undoable from 'redux-undo';\nimport {migrations, currentVersion} from './migrations';\nimport editorReducer from './slices/editorSlice';\n\nconst filteredActions = ['editor/addStopSymbol', 'editor/deleteStopSymbol',\n    'editor/editTopP', 'editor/editFrequencyPenalty', 'editor/editPresencePenalty',\n    'editor/loadTemplate', 'editor/editPrompt', 'editor/editApiKey', 'editor/editTemperature', 'editor/editModelName',\n    'editor/editMaxTokens', 'editor/loadTemplateFromFileData' // todo: examples?????\n];\n\nconst reducers = combineReducers(\n    {\n      editor: undoable(editorReducer, {\n          limit: 10,\n          filter: (action: Action) => {\n              return filteredActions.includes(action.type);\n          },\n          groupBy: (action) => filteredActions.includes(action.type) ? `${action.type}_${Math.floor(Date.now() / 1000 / 10)}` : null,\n      })\n    }\n);\n\nconst persistConfig = {\n    key: 'root',\n    version: currentVersion,\n    migrate: createMigrate(migrations),\n    storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\nconst middlewares = [\n    ...getDefaultMiddleware({\n        serializableCheck: false,\n        immutableCheck: false}),\n    createStateSyncMiddleware({blacklist: [PERSIST, PURGE, REHYDRATE]}),\n];\n\nexport const store = configureStore({\n    reducer: persistedReducer,\n    middleware: middlewares,\n});\n\nexport const persistor = persistStore(store);\ninitMessageListener(store);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { store, persistor } from './store';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <PersistGate loading={null} persistor={persistor}>\r\n            <App />\r\n        </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}